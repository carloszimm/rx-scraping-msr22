[{"distribution":"RxClojure","operators":[{"operator":"BlockingObservable.blocking","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"BlockingObservable.doseq","coreOperator":"Subscribe","category":"Observable Utility Operators"},{"operator":"BlockingObservable.into","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"BlockingObservable.seq","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"cache","coreOperator":"Replay","category":"Connectable Observable Operators"},{"operator":"catch*","coreOperator":"Catch","category":"Error Handling Operators"},{"operator":"concat","coreOperator":"Concat","category":"Mathematical and Aggregate Operators"},{"operator":"concat*","coreOperator":"Concat","category":"Mathematical and Aggregate Operators"},{"operator":"cons","coreOperator":"StartWith","category":"Combining Observables"},{"operator":"count","coreOperator":"Count","category":"Mathematical and Aggregate Operators"},{"operator":"cycle","coreOperator":"Repeat","category":"Creating Observables"},{"operator":"distinct","coreOperator":"Distinct","category":"Filtering Observables"},{"operator":"do","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"drop","coreOperator":"Skip","category":"Filtering Observables"},{"operator":"drop-while","coreOperator":"SkipWhile","category":"Conditional and Boolean Operators"},{"operator":"empty","coreOperator":"Empty/Never/Throw","category":"Creating Observables"},{"operator":"every","coreOperator":"All","category":"Conditional and Boolean Operators"},{"operator":"filter","coreOperator":"Filter","category":"Filtering Observables"},{"operator":"finally","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"first","coreOperator":"First","category":"Filtering Observables"},{"operator":"flatmap","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"generator","coreOperator":"Create","category":"Creating Observables"},{"operator":"group-by","coreOperator":"GroupBy","category":"Transforming Observables"},{"operator":"interleave","coreOperator":"Merge","category":"Combining Observables"},{"operator":"interleave*","coreOperator":"Merge","category":"Combining Observables"},{"operator":"interpose","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"into","coreOperator":"Reduce","category":"Mathematical and Aggregate Operators"},{"operator":"iterate","coreOperator":"Reduce","category":"Mathematical and Aggregate Operators"},{"operator":"keep","coreOperator":"Map","category":"Transforming Observables"},{"operator":"keep-indexed","coreOperator":"Map","category":"Transforming Observables"},{"operator":"last","coreOperator":"Last","category":"Filtering Observables"},{"operator":"longCount","coreOperator":"Count","category":"Mathematical and Aggregate Operators"},{"operator":"map","coreOperator":"Map","category":"Transforming Observables"},{"operator":"map","coreOperator":"Zip","category":"Combining Observables"},{"operator":"map-indexed","coreOperator":"Map","category":"Transforming Observables"},{"operator":"mapcat","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"mapCat","coreOperator":"Zip","category":"Combining Observables"},{"operator":"merge","coreOperator":"Merge","category":"Combining Observables"},{"operator":"merge-delay-error","coreOperator":"Merge","category":"Combining Observables"},{"operator":"merge-delay-error*","coreOperator":"Merge","category":"Combining Observables"},{"operator":"merge*","coreOperator":"Merge","category":"Combining Observables"},{"operator":"never","coreOperator":"Empty/Never/Throw","category":"Creating Observables"},{"operator":"next","coreOperator":"TakeLast","category":"Filtering Observables"},{"operator":"nth","coreOperator":"ElementAt","category":"Filtering Observables"},{"operator":"partition-all","coreOperator":"Window","category":"Transforming Observables"},{"operator":"range","coreOperator":"Range","category":"Creating Observables"},{"operator":"reduce","coreOperator":"Reduce","category":"Mathematical and Aggregate Operators"},{"operator":"reductions","coreOperator":"Scan","category":"Transforming Observables"},{"operator":"return","coreOperator":"Just","category":"Creating Observables"},{"operator":"seq","coreOperator":"From","category":"Creating Observables"},{"operator":"serialize","coreOperator":"Serialize","category":"Observable Utility Operators"},{"operator":"single","coreOperator":"First","category":"Filtering Observables"},{"operator":"some","coreOperator":"Contains","category":"Conditional and Boolean Operators"},{"operator":"sort","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"sort-by","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"sorted-list-by","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"split-with","coreOperator":"GroupBy","category":"Transforming Observables"},{"operator":"subscribe","coreOperator":"Subscribe","category":"Observable Utility Operators"},{"operator":"subscribe-on","coreOperator":"SubscribeOn","category":"Observable Utility Operators"},{"operator":"take","coreOperator":"Take","category":"Filtering Observables"},{"operator":"take-while","coreOperator":"TakeWhile","category":"Conditional and Boolean Operators"},{"operator":"throw","coreOperator":"Empty/Never/Throw","category":"Creating Observables"},{"operator":"unsubscribe-on","coreOperator":"SubscribeOn","category":"Observable Utility Operators"}]},{"distribution":"RxGroovy","operators":[{"operator":"all","coreOperator":"All","category":"Conditional and Boolean Operators"},{"operator":"amb","coreOperator":"Amb","category":"Conditional and Boolean Operators"},{"operator":"ambWith","coreOperator":"Amb","category":"Conditional and Boolean Operators"},{"operator":"and","coreOperator":"And/Then/When","category":"Combining Observables"},{"operator":"asyncAction","coreOperator":"Start","category":"Creating Observables"},{"operator":"asyncFunc","coreOperator":"Start","category":"Creating Observables"},{"operator":"averageDouble","coreOperator":"Average","category":"Mathematical and Aggregate Operators"},{"operator":"averageFloat","coreOperator":"Average","category":"Mathematical and Aggregate Operators"},{"operator":"averageInteger","coreOperator":"Average","category":"Mathematical and Aggregate Operators"},{"operator":"averageLong","coreOperator":"Average","category":"Mathematical and Aggregate Operators"},{"operator":"BlockingObservable.forEach","coreOperator":"Subscribe","category":"Observable Utility Operators"},{"operator":"BlockingObservable.from","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"BlockingObservable.getIterator","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"BlockingObservable.toFuture","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"BlockingObservable.toIterable","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"buffer","coreOperator":"Buffer","category":"Transforming Observables"},{"operator":"byLine","coreOperator":"Map","category":"Transforming Observables"},{"operator":"cache","coreOperator":"Replay","category":"Connectable Observable Operators"},{"operator":"cast","coreOperator":"Map","category":"Transforming Observables"},{"operator":"collect","coreOperator":"Reduce","category":"Mathematical and Aggregate Operators"},{"operator":"combineLatest","coreOperator":"CombineLatest","category":"Combining Observables"},{"operator":"concat","coreOperator":"Concat","category":"Mathematical and Aggregate Operators"},{"operator":"concatMap","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"concatWith","coreOperator":"Concat","category":"Mathematical and Aggregate Operators"},{"operator":"connect","coreOperator":"Connect","category":"Connectable Observable Operators"},{"operator":"contains","coreOperator":"Contains","category":"Conditional and Boolean Operators"},{"operator":"count","coreOperator":"Count","category":"Mathematical and Aggregate Operators"},{"operator":"countLong","coreOperator":"Count","category":"Mathematical and Aggregate Operators"},{"operator":"create","coreOperator":"Create","category":"Creating Observables"},{"operator":"debounce","coreOperator":"Debounce","category":"Filtering Observables"},{"operator":"decode","coreOperator":"From","category":"Creating Observables"},{"operator":"defaultIfEmpty","coreOperator":"DefaultIfEmpty","category":"Conditional and Boolean Operators"},{"operator":"defer","coreOperator":"Defer","category":"Creating Observables"},{"operator":"deferFuture","coreOperator":"Start","category":"Creating Observables"},{"operator":"delay","coreOperator":"Delay","category":"Observable Utility Operators"},{"operator":"delaySubscription","coreOperator":"Delay","category":"Observable Utility Operators"},{"operator":"dematerialize","coreOperator":"Materialize/Dematerialize","category":"Observable Utility Operators"},{"operator":"distinct","coreOperator":"Distinct","category":"Filtering Observables"},{"operator":"distinctUntilChanged","coreOperator":"Distinct","category":"Filtering Observables"},{"operator":"doOnCompleted","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"doOnEach","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"doOnError","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"doOnNext","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"doOnRequest","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"doOnSubscribe","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"doOnTerminate","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"doOnUnsubscribe","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"doWhile","coreOperator":"Repeat","category":"Creating Observables"},{"operator":"elementAt","coreOperator":"ElementAt","category":"Filtering Observables"},{"operator":"elementAtOrDefault","coreOperator":"ElementAt","category":"Filtering Observables"},{"operator":"empty","coreOperator":"Empty/Never/Throw","category":"Creating Observables"},{"operator":"encode","coreOperator":"Map","category":"Transforming Observables"},{"operator":"error","coreOperator":"Empty/Never/Throw","category":"Creating Observables"},{"operator":"exists","coreOperator":"Contains","category":"Conditional and Boolean Operators"},{"operator":"filter","coreOperator":"Filter","category":"Filtering Observables"},{"operator":"finallyDo","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"first","coreOperator":"First","category":"Filtering Observables"},{"operator":"firstOrDefault","coreOperator":"First","category":"Filtering Observables"},{"operator":"flatMap","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"flatMapIterable","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"forEach","coreOperator":"Subscribe","category":"Observable Utility Operators"},{"operator":"forEachFuture","coreOperator":"Start","category":"Creating Observables"},{"operator":"from","coreOperator":"From","category":"Creating Observables"},{"operator":"fromAction","coreOperator":"From","category":"Creating Observables"},{"operator":"fromAction","coreOperator":"Start","category":"Creating Observables"},{"operator":"fromCallable","coreOperator":"From","category":"Creating Observables"},{"operator":"fromCallable","coreOperator":"Start","category":"Creating Observables"},{"operator":"fromFunc0","coreOperator":"From","category":"Creating Observables"},{"operator":"fromFunc0","coreOperator":"Start","category":"Creating Observables"},{"operator":"fromRunnable","coreOperator":"From","category":"Creating Observables"},{"operator":"fromRunnable","coreOperator":"Start","category":"Creating Observables"},{"operator":"groupBy","coreOperator":"GroupBy","category":"Transforming Observables"},{"operator":"groupJoin","coreOperator":"Join","category":"Combining Observables"},{"operator":"ifThen","coreOperator":"Defer","category":"Creating Observables"},{"operator":"ignoreElements","coreOperator":"IgnoreElements","category":"Filtering Observables"},{"operator":"interval","coreOperator":"Interval","category":"Creating Observables"},{"operator":"isEmpty","coreOperator":"Contains","category":"Conditional and Boolean Operators"},{"operator":"join","coreOperator":"Join","category":"Combining Observables"},{"operator":"just","coreOperator":"Just","category":"Creating Observables"},{"operator":"last","coreOperator":"Last","category":"Filtering Observables"},{"operator":"lastOrDefault","coreOperator":"Last","category":"Filtering Observables"},{"operator":"latest","coreOperator":"First","category":"Filtering Observables"},{"operator":"limit","coreOperator":"Take","category":"Filtering Observables"},{"operator":"map","coreOperator":"Map","category":"Transforming Observables"},{"operator":"materialize","coreOperator":"Materialize/Dematerialize","category":"Observable Utility Operators"},{"operator":"max","coreOperator":"Max","category":"Mathematical and Aggregate Operators"},{"operator":"maxBy","coreOperator":"Max","category":"Mathematical and Aggregate Operators"},{"operator":"merge","coreOperator":"Merge","category":"Combining Observables"},{"operator":"mergeDelayError","coreOperator":"Merge","category":"Combining Observables"},{"operator":"mergeWith","coreOperator":"Merge","category":"Combining Observables"},{"operator":"min","coreOperator":"Min","category":"Mathematical and Aggregate Operators"},{"operator":"minBy","coreOperator":"Min","category":"Mathematical and Aggregate Operators"},{"operator":"mostRecent","coreOperator":"First","category":"Filtering Observables"},{"operator":"nest","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"never","coreOperator":"Empty/Never/Throw","category":"Creating Observables"},{"operator":"next","coreOperator":"First","category":"Filtering Observables"},{"operator":"observeOn","coreOperator":"ObserveOn","category":"Observable Utility Operators"},{"operator":"ofType","coreOperator":"Filter","category":"Filtering Observables"},{"operator":"onBackpressureBuffer","coreOperator":"backpressure operators","category":"Backpressure Operators"},{"operator":"onBackpressureDrop","coreOperator":"backpressure operators","category":"Backpressure Operators"},{"operator":"onBackpressureLatest","coreOperator":"backpressure operators","category":"Backpressure Operators"},{"operator":"onErrorResumeNext","coreOperator":"Catch","category":"Error Handling Operators"},{"operator":"onErrorReturn","coreOperator":"Catch","category":"Error Handling Operators"},{"operator":"onExceptionResumeNext","coreOperator":"Catch","category":"Error Handling Operators"},{"operator":"publish","coreOperator":"Publish","category":"Connectable Observable Operators"},{"operator":"range","coreOperator":"Range","category":"Creating Observables"},{"operator":"reduce","coreOperator":"Reduce","category":"Mathematical and Aggregate Operators"},{"operator":"refCount","coreOperator":"RefCount","category":"Connectable Observable Operators"},{"operator":"repeat","coreOperator":"Repeat","category":"Creating Observables"},{"operator":"repeatWhen","coreOperator":"Repeat","category":"Creating Observables"},{"operator":"replay","coreOperator":"Replay","category":"Connectable Observable Operators"},{"operator":"retry","coreOperator":"Retry","category":"Error Handling Operators"},{"operator":"retryWhen","coreOperator":"Retry","category":"Error Handling Operators"},{"operator":"runAsync","coreOperator":"From","category":"Creating Observables"},{"operator":"sample","coreOperator":"Sample","category":"Filtering Observables"},{"operator":"scan","coreOperator":"Scan","category":"Transforming Observables"},{"operator":"sequenceEqual","coreOperator":"SequenceEqual","category":"Conditional and Boolean Operators"},{"operator":"serialize","coreOperator":"Serialize","category":"Observable Utility Operators"},{"operator":"share","coreOperator":"RefCount","category":"Connectable Observable Operators"},{"operator":"single","coreOperator":"First","category":"Filtering Observables"},{"operator":"singleOrDefault","coreOperator":"First","category":"Filtering Observables"},{"operator":"skip","coreOperator":"Skip","category":"Filtering Observables"},{"operator":"skipLast","coreOperator":"SkipLast","category":"Filtering Observables"},{"operator":"skipUntil","coreOperator":"SkipUntil","category":"Conditional and Boolean Operators"},{"operator":"skipWhile","coreOperator":"SkipWhile","category":"Conditional and Boolean Operators"},{"operator":"start","coreOperator":"Start","category":"Creating Observables"},{"operator":"startFuture","coreOperator":"Start","category":"Creating Observables"},{"operator":"startWith","coreOperator":"StartWith","category":"Combining Observables"},{"operator":"StringObservable.join","coreOperator":"Sum","category":"Mathematical and Aggregate Operators"},{"operator":"StringObservable.split","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"StringObservable.stringConcat","coreOperator":"Sum","category":"Mathematical and Aggregate Operators"},{"operator":"subscribe","coreOperator":"Subscribe","category":"Observable Utility Operators"},{"operator":"subscribeOn","coreOperator":"SubscribeOn","category":"Observable Utility Operators"},{"operator":"sumDouble","coreOperator":"Sum","category":"Mathematical and Aggregate Operators"},{"operator":"sumFloat","coreOperator":"Sum","category":"Mathematical and Aggregate Operators"},{"operator":"sumInteger","coreOperator":"Sum","category":"Mathematical and Aggregate Operators"},{"operator":"sumLong","coreOperator":"Sum","category":"Mathematical and Aggregate Operators"},{"operator":"switchCase","coreOperator":"Defer","category":"Creating Observables"},{"operator":"switchIfEmpty","coreOperator":"DefaultIfEmpty","category":"Conditional and Boolean Operators"},{"operator":"switchMap","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"switchOnNext","coreOperator":"Switch","category":"Combining Observables"},{"operator":"take","coreOperator":"Take","category":"Filtering Observables"},{"operator":"takeFirst","coreOperator":"First","category":"Filtering Observables"},{"operator":"takeLast","coreOperator":"TakeLast","category":"Filtering Observables"},{"operator":"takeLastBuffer","coreOperator":"TakeLast","category":"Filtering Observables"},{"operator":"takeUntil","coreOperator":"TakeUntil","category":"Conditional and Boolean Operators"},{"operator":"takeWhile","coreOperator":"TakeWhile","category":"Conditional and Boolean Operators"},{"operator":"then","coreOperator":"And/Then/When","category":"Combining Observables"},{"operator":"throttleFirst","coreOperator":"Sample","category":"Filtering Observables"},{"operator":"throttleLast","coreOperator":"Sample","category":"Filtering Observables"},{"operator":"throttleWithTimeout","coreOperator":"Debounce","category":"Filtering Observables"},{"operator":"timeInterval","coreOperator":"TimeInterval","category":"Observable Utility Operators"},{"operator":"timeout","coreOperator":"Timeout","category":"Observable Utility Operators"},{"operator":"timer","coreOperator":"Timer","category":"Creating Observables"},{"operator":"timestamp","coreOperator":"Timestamp","category":"Observable Utility Operators"},{"operator":"toAsync","coreOperator":"Start","category":"Creating Observables"},{"operator":"toBlocking","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"toList","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"toMap","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"toMultiMap","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"toSortedList","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"unsubscribeOn","coreOperator":"SubscribeOn","category":"Observable Utility Operators"},{"operator":"using","coreOperator":"Using","category":"Observable Utility Operators"},{"operator":"when","coreOperator":"And/Then/When","category":"Combining Observables"},{"operator":"whileDo","coreOperator":"Repeat","category":"Creating Observables"},{"operator":"window","coreOperator":"Window","category":"Transforming Observables"},{"operator":"withLatestFrom","coreOperator":"CombineLatest","category":"Combining Observables"},{"operator":"zip","coreOperator":"Zip","category":"Combining Observables"},{"operator":"zipWith","coreOperator":"Zip","category":"Combining Observables"}]},{"distribution":"RxJava 1․x","operators":[{"operator":"all","coreOperator":"All","category":"Conditional and Boolean Operators"},{"operator":"amb","coreOperator":"Amb","category":"Conditional and Boolean Operators"},{"operator":"ambWith","coreOperator":"Amb","category":"Conditional and Boolean Operators"},{"operator":"and","coreOperator":"And/Then/When","category":"Combining Observables"},{"operator":"asyncAction","coreOperator":"Start","category":"Creating Observables"},{"operator":"asyncFunc","coreOperator":"Start","category":"Creating Observables"},{"operator":"averageDouble","coreOperator":"Average","category":"Mathematical and Aggregate Operators"},{"operator":"averageFloat","coreOperator":"Average","category":"Mathematical and Aggregate Operators"},{"operator":"averageInteger","coreOperator":"Average","category":"Mathematical and Aggregate Operators"},{"operator":"averageLong","coreOperator":"Average","category":"Mathematical and Aggregate Operators"},{"operator":"BlockingObservable.forEach","coreOperator":"Subscribe","category":"Observable Utility Operators"},{"operator":"BlockingObservable.from","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"BlockingObservable.getIterator","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"BlockingObservable.toFuture","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"BlockingObservable.toIterable","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"buffer","coreOperator":"Buffer","category":"Transforming Observables"},{"operator":"byLine","coreOperator":"Map","category":"Transforming Observables"},{"operator":"cache","coreOperator":"Replay","category":"Connectable Observable Operators"},{"operator":"cast","coreOperator":"Map","category":"Transforming Observables"},{"operator":"collect","coreOperator":"Reduce","category":"Mathematical and Aggregate Operators"},{"operator":"combineLatest","coreOperator":"CombineLatest","category":"Combining Observables"},{"operator":"concat","coreOperator":"Concat","category":"Mathematical and Aggregate Operators"},{"operator":"concatMap","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"concatWith","coreOperator":"Concat","category":"Mathematical and Aggregate Operators"},{"operator":"connect","coreOperator":"Connect","category":"Connectable Observable Operators"},{"operator":"contains","coreOperator":"Contains","category":"Conditional and Boolean Operators"},{"operator":"count","coreOperator":"Count","category":"Mathematical and Aggregate Operators"},{"operator":"countLong","coreOperator":"Count","category":"Mathematical and Aggregate Operators"},{"operator":"create","coreOperator":"Create","category":"Creating Observables"},{"operator":"debounce","coreOperator":"Debounce","category":"Filtering Observables"},{"operator":"decode","coreOperator":"From","category":"Creating Observables"},{"operator":"defaultIfEmpty","coreOperator":"DefaultIfEmpty","category":"Conditional and Boolean Operators"},{"operator":"defer","coreOperator":"Defer","category":"Creating Observables"},{"operator":"deferFuture","coreOperator":"Start","category":"Creating Observables"},{"operator":"delay","coreOperator":"Delay","category":"Observable Utility Operators"},{"operator":"delaySubscription","coreOperator":"Delay","category":"Observable Utility Operators"},{"operator":"dematerialize","coreOperator":"Materialize/Dematerialize","category":"Observable Utility Operators"},{"operator":"distinct","coreOperator":"Distinct","category":"Filtering Observables"},{"operator":"distinctUntilChanged","coreOperator":"Distinct","category":"Filtering Observables"},{"operator":"doAfterTerminate","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"doOnCompleted","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"doOnEach","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"doOnError","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"doOnNext","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"doOnRequest","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"doOnSubscribe","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"doOnTerminate","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"doOnUnsubscribe","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"doWhile","coreOperator":"Repeat","category":"Creating Observables"},{"operator":"elementAt","coreOperator":"ElementAt","category":"Filtering Observables"},{"operator":"elementAtOrDefault","coreOperator":"ElementAt","category":"Filtering Observables"},{"operator":"empty","coreOperator":"Empty/Never/Throw","category":"Creating Observables"},{"operator":"encode","coreOperator":"Map","category":"Transforming Observables"},{"operator":"error","coreOperator":"Empty/Never/Throw","category":"Creating Observables"},{"operator":"exists","coreOperator":"Contains","category":"Conditional and Boolean Operators"},{"operator":"filter","coreOperator":"Filter","category":"Filtering Observables"},{"operator":"finallyDo","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"first","coreOperator":"First","category":"Filtering Observables"},{"operator":"firstOrDefault","coreOperator":"First","category":"Filtering Observables"},{"operator":"flatMap","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"flatMapIterable","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"forEach","coreOperator":"Subscribe","category":"Observable Utility Operators"},{"operator":"forEachFuture","coreOperator":"Start","category":"Creating Observables"},{"operator":"from","coreOperator":"From","category":"Creating Observables"},{"operator":"fromAction","coreOperator":"From","category":"Creating Observables"},{"operator":"fromAction","coreOperator":"Start","category":"Creating Observables"},{"operator":"fromCallable","coreOperator":"From","category":"Creating Observables"},{"operator":"fromCallable","coreOperator":"Start","category":"Creating Observables"},{"operator":"fromFunc0","coreOperator":"From","category":"Creating Observables"},{"operator":"fromFunc0","coreOperator":"Start","category":"Creating Observables"},{"operator":"fromRunnable","coreOperator":"From","category":"Creating Observables"},{"operator":"fromRunnable","coreOperator":"Start","category":"Creating Observables"},{"operator":"groupBy","coreOperator":"GroupBy","category":"Transforming Observables"},{"operator":"groupJoin","coreOperator":"Join","category":"Combining Observables"},{"operator":"ifThen","coreOperator":"Defer","category":"Creating Observables"},{"operator":"ignoreElements","coreOperator":"IgnoreElements","category":"Filtering Observables"},{"operator":"interval","coreOperator":"Interval","category":"Creating Observables"},{"operator":"isEmpty","coreOperator":"Contains","category":"Conditional and Boolean Operators"},{"operator":"join","coreOperator":"Join","category":"Combining Observables"},{"operator":"just","coreOperator":"Just","category":"Creating Observables"},{"operator":"last","coreOperator":"Last","category":"Filtering Observables"},{"operator":"lastOrDefault","coreOperator":"Last","category":"Filtering Observables"},{"operator":"latest","coreOperator":"First","category":"Filtering Observables"},{"operator":"limit","coreOperator":"Take","category":"Filtering Observables"},{"operator":"map","coreOperator":"Map","category":"Transforming Observables"},{"operator":"materialize","coreOperator":"Materialize/Dematerialize","category":"Observable Utility Operators"},{"operator":"max","coreOperator":"Max","category":"Mathematical and Aggregate Operators"},{"operator":"maxBy","coreOperator":"Max","category":"Mathematical and Aggregate Operators"},{"operator":"merge","coreOperator":"Merge","category":"Combining Observables"},{"operator":"mergeDelayError","coreOperator":"Merge","category":"Combining Observables"},{"operator":"mergeWith","coreOperator":"Merge","category":"Combining Observables"},{"operator":"min","coreOperator":"Min","category":"Mathematical and Aggregate Operators"},{"operator":"minBy","coreOperator":"Min","category":"Mathematical and Aggregate Operators"},{"operator":"mostRecent","coreOperator":"First","category":"Filtering Observables"},{"operator":"nest","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"never","coreOperator":"Empty/Never/Throw","category":"Creating Observables"},{"operator":"next","coreOperator":"First","category":"Filtering Observables"},{"operator":"observeOn","coreOperator":"ObserveOn","category":"Observable Utility Operators"},{"operator":"ofType","coreOperator":"Filter","category":"Filtering Observables"},{"operator":"onBackpressureBuffer","coreOperator":"backpressure operators","category":"Backpressure Operators"},{"operator":"onBackpressureDrop","coreOperator":"backpressure operators","category":"Backpressure Operators"},{"operator":"onBackpressureLatest","coreOperator":"backpressure operators","category":"Backpressure Operators"},{"operator":"onErrorResumeNext","coreOperator":"Catch","category":"Error Handling Operators"},{"operator":"onErrorReturn","coreOperator":"Catch","category":"Error Handling Operators"},{"operator":"onExceptionResumeNext","coreOperator":"Catch","category":"Error Handling Operators"},{"operator":"publish","coreOperator":"Publish","category":"Connectable Observable Operators"},{"operator":"range","coreOperator":"Range","category":"Creating Observables"},{"operator":"reduce","coreOperator":"Reduce","category":"Mathematical and Aggregate Operators"},{"operator":"refCount","coreOperator":"RefCount","category":"Connectable Observable Operators"},{"operator":"repeat","coreOperator":"Repeat","category":"Creating Observables"},{"operator":"repeatWhen","coreOperator":"Repeat","category":"Creating Observables"},{"operator":"replay","coreOperator":"Replay","category":"Connectable Observable Operators"},{"operator":"retry","coreOperator":"Retry","category":"Error Handling Operators"},{"operator":"retryWhen","coreOperator":"Retry","category":"Error Handling Operators"},{"operator":"runAsync","coreOperator":"From","category":"Creating Observables"},{"operator":"sample","coreOperator":"Sample","category":"Filtering Observables"},{"operator":"scan","coreOperator":"Scan","category":"Transforming Observables"},{"operator":"sequenceEqual","coreOperator":"SequenceEqual","category":"Conditional and Boolean Operators"},{"operator":"serialize","coreOperator":"Serialize","category":"Observable Utility Operators"},{"operator":"share","coreOperator":"RefCount","category":"Connectable Observable Operators"},{"operator":"single","coreOperator":"First","category":"Filtering Observables"},{"operator":"singleOrDefault","coreOperator":"First","category":"Filtering Observables"},{"operator":"skip","coreOperator":"Skip","category":"Filtering Observables"},{"operator":"skipLast","coreOperator":"SkipLast","category":"Filtering Observables"},{"operator":"skipUntil","coreOperator":"SkipUntil","category":"Conditional and Boolean Operators"},{"operator":"skipWhile","coreOperator":"SkipWhile","category":"Conditional and Boolean Operators"},{"operator":"start","coreOperator":"Start","category":"Creating Observables"},{"operator":"startFuture","coreOperator":"Start","category":"Creating Observables"},{"operator":"startWith","coreOperator":"StartWith","category":"Combining Observables"},{"operator":"StringObervable.split","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"StringObservable.join","coreOperator":"Sum","category":"Mathematical and Aggregate Operators"},{"operator":"StringObservable.stringConcat","coreOperator":"Sum","category":"Mathematical and Aggregate Operators"},{"operator":"subscribe","coreOperator":"Subscribe","category":"Observable Utility Operators"},{"operator":"subscribeOn","coreOperator":"SubscribeOn","category":"Observable Utility Operators"},{"operator":"sumDouble","coreOperator":"Sum","category":"Mathematical and Aggregate Operators"},{"operator":"sumFloat","coreOperator":"Sum","category":"Mathematical and Aggregate Operators"},{"operator":"sumInteger","coreOperator":"Sum","category":"Mathematical and Aggregate Operators"},{"operator":"sumLong","coreOperator":"Sum","category":"Mathematical and Aggregate Operators"},{"operator":"switchCase","coreOperator":"Defer","category":"Creating Observables"},{"operator":"switchIfEmpty","coreOperator":"DefaultIfEmpty","category":"Conditional and Boolean Operators"},{"operator":"switchMap","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"switchOnNext","coreOperator":"Switch","category":"Combining Observables"},{"operator":"take","coreOperator":"Take","category":"Filtering Observables"},{"operator":"takeFirst","coreOperator":"First","category":"Filtering Observables"},{"operator":"takeLast","coreOperator":"TakeLast","category":"Filtering Observables"},{"operator":"takeLastBuffer","coreOperator":"TakeLast","category":"Filtering Observables"},{"operator":"takeUntil","coreOperator":"TakeUntil","category":"Conditional and Boolean Operators"},{"operator":"takeWhile","coreOperator":"TakeWhile","category":"Conditional and Boolean Operators"},{"operator":"then","coreOperator":"And/Then/When","category":"Combining Observables"},{"operator":"throttleFirst","coreOperator":"Sample","category":"Filtering Observables"},{"operator":"throttleLast","coreOperator":"Sample","category":"Filtering Observables"},{"operator":"throttleWithTimeout","coreOperator":"Debounce","category":"Filtering Observables"},{"operator":"timeInterval","coreOperator":"TimeInterval","category":"Observable Utility Operators"},{"operator":"timeout","coreOperator":"Timeout","category":"Observable Utility Operators"},{"operator":"timer","coreOperator":"Timer","category":"Creating Observables"},{"operator":"timestamp","coreOperator":"Timestamp","category":"Observable Utility Operators"},{"operator":"toAsync","coreOperator":"Start","category":"Creating Observables"},{"operator":"toBlocking","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"toList","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"toMap","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"toMultiMap","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"toSortedList","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"unsubscribeOn","coreOperator":"SubscribeOn","category":"Observable Utility Operators"},{"operator":"using","coreOperator":"Using","category":"Observable Utility Operators"},{"operator":"when","coreOperator":"And/Then/When","category":"Combining Observables"},{"operator":"whileDo","coreOperator":"Repeat","category":"Creating Observables"},{"operator":"window","coreOperator":"Window","category":"Transforming Observables"},{"operator":"withLatestFrom","coreOperator":"CombineLatest","category":"Combining Observables"},{"operator":"zip","coreOperator":"Zip","category":"Combining Observables"},{"operator":"zipWith","coreOperator":"Zip","category":"Combining Observables"}]},{"distribution":"RxJava 2․x","operators":[{"operator":"all","coreOperator":"All","category":"Conditional and Boolean Operators"},{"operator":"amb","coreOperator":"Amb","category":"Conditional and Boolean Operators"},{"operator":"ambArray","coreOperator":"Amb","category":"Conditional and Boolean Operators"},{"operator":"ambWith","coreOperator":"Amb","category":"Conditional and Boolean Operators"},{"operator":"any","coreOperator":"Contains","category":"Conditional and Boolean Operators"},{"operator":"blockingFirst","coreOperator":"First","category":"Filtering Observables"},{"operator":"blockingForEach","coreOperator":"Subscribe","category":"Observable Utility Operators"},{"operator":"blockingIterable","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"blockingLast","coreOperator":"Last","category":"Filtering Observables"},{"operator":"blockingLatest","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"blockingMostRecent","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"blockingNext","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"blockingSingle","coreOperator":"First","category":"Filtering Observables"},{"operator":"blockingSubscribe","coreOperator":"Subscribe","category":"Observable Utility Operators"},{"operator":"buffer","coreOperator":"Buffer","category":"Transforming Observables"},{"operator":"cache","coreOperator":"Replay","category":"Connectable Observable Operators"},{"operator":"cast","coreOperator":"Map","category":"Transforming Observables"},{"operator":"collect","coreOperator":"Reduce","category":"Mathematical and Aggregate Operators"},{"operator":"collectInto","coreOperator":"Reduce","category":"Mathematical and Aggregate Operators"},{"operator":"combineLatest","coreOperator":"CombineLatest","category":"Combining Observables"},{"operator":"combineLatestDelayError","coreOperator":"CombineLatest","category":"Combining Observables"},{"operator":"concat","coreOperator":"Concat","category":"Mathematical and Aggregate Operators"},{"operator":"concatArray","coreOperator":"Concat","category":"Mathematical and Aggregate Operators"},{"operator":"concatArrayDelayError","coreOperator":"Concat","category":"Mathematical and Aggregate Operators"},{"operator":"concatArrayEager","coreOperator":"Concat","category":"Mathematical and Aggregate Operators"},{"operator":"concatDelayError","coreOperator":"Concat","category":"Mathematical and Aggregate Operators"},{"operator":"concatEager","coreOperator":"Concat","category":"Mathematical and Aggregate Operators"},{"operator":"concatMap","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"concatMapDelayError","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"concatMapEager","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"concatMapEagerDelayError","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"concatMapIterable","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"concatWith","coreOperator":"Concat","category":"Mathematical and Aggregate Operators"},{"operator":"connect","coreOperator":"Connect","category":"Connectable Observable Operators"},{"operator":"contains","coreOperator":"Contains","category":"Conditional and Boolean Operators"},{"operator":"create","coreOperator":"Create","category":"Creating Observables"},{"operator":"debounce","coreOperator":"Debounce","category":"Filtering Observables"},{"operator":"defaultIfEmpty","coreOperator":"DefaultIfEmpty","category":"Conditional and Boolean Operators"},{"operator":"defer","coreOperator":"Defer","category":"Creating Observables"},{"operator":"delay","coreOperator":"Delay","category":"Observable Utility Operators"},{"operator":"delaySubscription","coreOperator":"Delay","category":"Observable Utility Operators"},{"operator":"dematerialize","coreOperator":"Materialize/Dematerialize","category":"Observable Utility Operators"},{"operator":"distinct","coreOperator":"Distinct","category":"Filtering Observables"},{"operator":"distinctUntilChanged","coreOperator":"Distinct","category":"Filtering Observables"},{"operator":"doAfterTerminate","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"doOnComplete","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"doOnDispose","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"doOnEach","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"doOnError","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"doOnLifecycle","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"doOnNext","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"doOnSubscribe","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"doOnTerminate","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"elementAt","coreOperator":"ElementAt","category":"Filtering Observables"},{"operator":"empty","coreOperator":"Empty/Never/Throw","category":"Creating Observables"},{"operator":"error","coreOperator":"Empty/Never/Throw","category":"Creating Observables"},{"operator":"filter","coreOperator":"Filter","category":"Filtering Observables"},{"operator":"first","coreOperator":"First","category":"Filtering Observables"},{"operator":"firstElement","coreOperator":"First","category":"Filtering Observables"},{"operator":"flatMap","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"flatMapIterable","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"Flowable","coreOperator":"backpressure operators","category":"Backpressure Operators"},{"operator":"forEachWhile","coreOperator":"Subscribe","category":"Observable Utility Operators"},{"operator":"fromArray","coreOperator":"From","category":"Creating Observables"},{"operator":"fromCallable","coreOperator":"From","category":"Creating Observables"},{"operator":"fromCallable","coreOperator":"Start","category":"Creating Observables"},{"operator":"fromFuture","coreOperator":"From","category":"Creating Observables"},{"operator":"fromIterable","coreOperator":"From","category":"Creating Observables"},{"operator":"fromPublisher","coreOperator":"From","category":"Creating Observables"},{"operator":"generate","coreOperator":"Create","category":"Creating Observables"},{"operator":"groupBy","coreOperator":"GroupBy","category":"Transforming Observables"},{"operator":"groupJoin","coreOperator":"Join","category":"Combining Observables"},{"operator":"ignoreElements","coreOperator":"IgnoreElements","category":"Filtering Observables"},{"operator":"interval","coreOperator":"Interval","category":"Creating Observables"},{"operator":"intervalRange","coreOperator":"Range","category":"Creating Observables"},{"operator":"isEmpty","coreOperator":"Contains","category":"Conditional and Boolean Operators"},{"operator":"join","coreOperator":"Join","category":"Combining Observables"},{"operator":"just","coreOperator":"Just","category":"Creating Observables"},{"operator":"last","coreOperator":"Last","category":"Filtering Observables"},{"operator":"lastElement","coreOperator":"Last","category":"Filtering Observables"},{"operator":"map","coreOperator":"Map","category":"Transforming Observables"},{"operator":"materialize","coreOperator":"Materialize/Dematerialize","category":"Observable Utility Operators"},{"operator":"merge","coreOperator":"Merge","category":"Combining Observables"},{"operator":"mergeArray","coreOperator":"Merge","category":"Combining Observables"},{"operator":"mergeArrayDelayError","coreOperator":"Merge","category":"Combining Observables"},{"operator":"mergeDelayError","coreOperator":"Merge","category":"Combining Observables"},{"operator":"mergeWith","coreOperator":"Merge","category":"Combining Observables"},{"operator":"never","coreOperator":"Empty/Never/Throw","category":"Creating Observables"},{"operator":"observeOn","coreOperator":"ObserveOn","category":"Observable Utility Operators"},{"operator":"ofType","coreOperator":"Filter","category":"Filtering Observables"},{"operator":"onErrorResumeNext","coreOperator":"Catch","category":"Error Handling Operators"},{"operator":"onErrorReturn","coreOperator":"Catch","category":"Error Handling Operators"},{"operator":"onErrorReturnItem","coreOperator":"Catch","category":"Error Handling Operators"},{"operator":"onExceptionResumeNext","coreOperator":"Catch","category":"Error Handling Operators"},{"operator":"onTerminateDetach","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"publish","coreOperator":"Publish","category":"Connectable Observable Operators"},{"operator":"range","coreOperator":"Range","category":"Creating Observables"},{"operator":"reduce","coreOperator":"Reduce","category":"Mathematical and Aggregate Operators"},{"operator":"reduceWith","coreOperator":"Reduce","category":"Mathematical and Aggregate Operators"},{"operator":"repeat","coreOperator":"Repeat","category":"Creating Observables"},{"operator":"repeatUntil","coreOperator":"Repeat","category":"Creating Observables"},{"operator":"repeatWhen","coreOperator":"Repeat","category":"Creating Observables"},{"operator":"replay","coreOperator":"Replay","category":"Connectable Observable Operators"},{"operator":"retry","coreOperator":"Retry","category":"Error Handling Operators"},{"operator":"retryUntil","coreOperator":"Retry","category":"Error Handling Operators"},{"operator":"retryWhen","coreOperator":"Retry","category":"Error Handling Operators"},{"operator":"safeSubscribe","coreOperator":"Subscribe","category":"Observable Utility Operators"},{"operator":"sample","coreOperator":"Sample","category":"Filtering Observables"},{"operator":"scan","coreOperator":"Scan","category":"Transforming Observables"},{"operator":"sequenceEqual","coreOperator":"SequenceEqual","category":"Conditional and Boolean Operators"},{"operator":"serialize","coreOperator":"Serialize","category":"Observable Utility Operators"},{"operator":"share","coreOperator":"RefCount","category":"Connectable Observable Operators"},{"operator":"single","coreOperator":"First","category":"Filtering Observables"},{"operator":"singleElement","coreOperator":"First","category":"Filtering Observables"},{"operator":"skip","coreOperator":"Skip","category":"Filtering Observables"},{"operator":"skipLast","coreOperator":"SkipLast","category":"Filtering Observables"},{"operator":"skipUntil","coreOperator":"SkipUntil","category":"Conditional and Boolean Operators"},{"operator":"skipWhile","coreOperator":"SkipWhile","category":"Conditional and Boolean Operators"},{"operator":"sorted","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"startWith","coreOperator":"StartWith","category":"Combining Observables"},{"operator":"subscribe","coreOperator":"Subscribe","category":"Observable Utility Operators"},{"operator":"subscribeOn","coreOperator":"SubscribeOn","category":"Observable Utility Operators"},{"operator":"switchIfEmpty","coreOperator":"DefaultIfEmpty","category":"Conditional and Boolean Operators"},{"operator":"switchMap","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"switchMapDelayError","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"switchOnNext","coreOperator":"Switch","category":"Combining Observables"},{"operator":"switchOnNextDelayError","coreOperator":"Switch","category":"Combining Observables"},{"operator":"take","coreOperator":"Take","category":"Filtering Observables"},{"operator":"takeFirst","coreOperator":"First","category":"Filtering Observables"},{"operator":"takeLast","coreOperator":"TakeLast","category":"Filtering Observables"},{"operator":"takeUntil","coreOperator":"TakeUntil","category":"Conditional and Boolean Operators"},{"operator":"takeWhile","coreOperator":"TakeWhile","category":"Conditional and Boolean Operators"},{"operator":"throttleFirst","coreOperator":"Sample","category":"Filtering Observables"},{"operator":"throttleLast","coreOperator":"Sample","category":"Filtering Observables"},{"operator":"throttleWithTimeout","coreOperator":"Debounce","category":"Filtering Observables"},{"operator":"timeInterval","coreOperator":"TimeInterval","category":"Observable Utility Operators"},{"operator":"timeout","coreOperator":"Timeout","category":"Observable Utility Operators"},{"operator":"timer","coreOperator":"Timer","category":"Creating Observables"},{"operator":"timestamp","coreOperator":"Timestamp","category":"Observable Utility Operators"},{"operator":"to","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"toFuture","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"toList","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"toMap","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"toMultimap","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"toSortedList","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"unsafeCreate","coreOperator":"Create","category":"Creating Observables"},{"operator":"unsubscribeOn","coreOperator":"SubscribeOn","category":"Observable Utility Operators"},{"operator":"using","coreOperator":"Using","category":"Observable Utility Operators"},{"operator":"window","coreOperator":"Window","category":"Transforming Observables"},{"operator":"withLatestFrom","coreOperator":"CombineLatest","category":"Combining Observables"},{"operator":"zip","coreOperator":"Zip","category":"Combining Observables"},{"operator":"zipArray","coreOperator":"Zip","category":"Combining Observables"},{"operator":"zipIterable","coreOperator":"Zip","category":"Combining Observables"},{"operator":"zipWith","coreOperator":"Zip","category":"Combining Observables"}]},{"distribution":"RxJS","operators":[{"operator":"amb","coreOperator":"Amb","category":"Conditional and Boolean Operators"},{"operator":"and","coreOperator":"And/Then/When","category":"Combining Observables"},{"operator":"average","coreOperator":"Average","category":"Mathematical and Aggregate Operators"},{"operator":"buffer","coreOperator":"Buffer","category":"Transforming Observables"},{"operator":"bufferWithCount","coreOperator":"Buffer","category":"Transforming Observables"},{"operator":"bufferWithTime","coreOperator":"Buffer","category":"Transforming Observables"},{"operator":"bufferWithTimeOrCount","coreOperator":"Buffer","category":"Transforming Observables"},{"operator":"case","coreOperator":"Defer","category":"Creating Observables"},{"operator":"catch","coreOperator":"Catch","category":"Error Handling Operators"},{"operator":"combineLatest","coreOperator":"CombineLatest","category":"Combining Observables"},{"operator":"concat","coreOperator":"Concat","category":"Mathematical and Aggregate Operators"},{"operator":"concatAll","coreOperator":"Concat","category":"Mathematical and Aggregate Operators"},{"operator":"concatMap","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"concatMapObserver","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"connect","coreOperator":"Connect","category":"Connectable Observable Operators"},{"operator":"contains","coreOperator":"Contains","category":"Conditional and Boolean Operators"},{"operator":"controlled","coreOperator":"backpressure operators","category":"Backpressure Operators"},{"operator":"count","coreOperator":"Count","category":"Mathematical and Aggregate Operators"},{"operator":"create","coreOperator":"Create","category":"Creating Observables"},{"operator":"createWithDisposable","coreOperator":"Create","category":"Creating Observables"},{"operator":"debounce","coreOperator":"Debounce","category":"Filtering Observables"},{"operator":"debounceWithSelector","coreOperator":"Debounce","category":"Filtering Observables"},{"operator":"defaultIfEmpty","coreOperator":"DefaultIfEmpty","category":"Conditional and Boolean Operators"},{"operator":"defer","coreOperator":"Defer","category":"Creating Observables"},{"operator":"delay","coreOperator":"Delay","category":"Observable Utility Operators"},{"operator":"delaySubscription","coreOperator":"Delay","category":"Observable Utility Operators"},{"operator":"delayWithSelector","coreOperator":"Delay","category":"Observable Utility Operators"},{"operator":"dematerialize","coreOperator":"Materialize/Dematerialize","category":"Observable Utility Operators"},{"operator":"distinct","coreOperator":"Distinct","category":"Filtering Observables"},{"operator":"distinctUntilChanged","coreOperator":"Distinct","category":"Filtering Observables"},{"operator":"do","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"doOnCompleted","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"doOnError","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"doOnNext","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"doWhile","coreOperator":"Repeat","category":"Creating Observables"},{"operator":"elementAt","coreOperator":"ElementAt","category":"Filtering Observables"},{"operator":"empty","coreOperator":"Empty/Never/Throw","category":"Creating Observables"},{"operator":"every","coreOperator":"All","category":"Conditional and Boolean Operators"},{"operator":"expand","coreOperator":"Scan","category":"Transforming Observables"},{"operator":"filter","coreOperator":"Filter","category":"Filtering Observables"},{"operator":"finally","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"find","coreOperator":"First","category":"Filtering Observables"},{"operator":"findIndex","coreOperator":"First","category":"Filtering Observables"},{"operator":"findIndex","coreOperator":"Contains","category":"Conditional and Boolean Operators"},{"operator":"first","coreOperator":"First","category":"Filtering Observables"},{"operator":"flatMap","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"flatMapFirst","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"flatMapLatest","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"flatMapObserver","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"flatMapWithMaxConcurrency","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"for","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"forEach","coreOperator":"Subscribe","category":"Observable Utility Operators"},{"operator":"forIn","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"forkJoin","coreOperator":"Zip","category":"Combining Observables"},{"operator":"from","coreOperator":"From","category":"Creating Observables"},{"operator":"fromCallback","coreOperator":"From","category":"Creating Observables"},{"operator":"fromEvent","coreOperator":"From","category":"Creating Observables"},{"operator":"fromEventPattern","coreOperator":"From","category":"Creating Observables"},{"operator":"fromNodeCallback","coreOperator":"From","category":"Creating Observables"},{"operator":"fromPromise","coreOperator":"From","category":"Creating Observables"},{"operator":"generate","coreOperator":"Create","category":"Creating Observables"},{"operator":"generateWithAbsoluteTime","coreOperator":"Create","category":"Creating Observables"},{"operator":"generateWithRelativeTime","coreOperator":"Create","category":"Creating Observables"},{"operator":"groupBy","coreOperator":"GroupBy","category":"Transforming Observables"},{"operator":"groupByUntil","coreOperator":"GroupBy","category":"Transforming Observables"},{"operator":"groupJoin","coreOperator":"Join","category":"Combining Observables"},{"operator":"if","coreOperator":"Defer","category":"Creating Observables"},{"operator":"ignoreElements","coreOperator":"IgnoreElements","category":"Filtering Observables"},{"operator":"indexOf","coreOperator":"Contains","category":"Conditional and Boolean Operators"},{"operator":"interval","coreOperator":"Interval","category":"Creating Observables"},{"operator":"isEmpty","coreOperator":"Contains","category":"Conditional and Boolean Operators"},{"operator":"join","coreOperator":"Join","category":"Combining Observables"},{"operator":"jortSort","coreOperator":"All","category":"Conditional and Boolean Operators"},{"operator":"jortSortUntil","coreOperator":"All","category":"Conditional and Boolean Operators"},{"operator":"just","coreOperator":"Just","category":"Creating Observables"},{"operator":"last","coreOperator":"Last","category":"Filtering Observables"},{"operator":"let","coreOperator":"Publish","category":"Connectable Observable Operators"},{"operator":"letBind","coreOperator":"Publish","category":"Connectable Observable Operators"},{"operator":"manySelect","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"map","coreOperator":"Map","category":"Transforming Observables"},{"operator":"max","coreOperator":"Max","category":"Mathematical and Aggregate Operators"},{"operator":"maxBy","coreOperator":"Max","category":"Mathematical and Aggregate Operators"},{"operator":"merge","coreOperator":"Merge","category":"Combining Observables"},{"operator":"mergeAll","coreOperator":"Merge","category":"Combining Observables"},{"operator":"mergeDelayError","coreOperator":"Merge","category":"Combining Observables"},{"operator":"min","coreOperator":"Min","category":"Mathematical and Aggregate Operators"},{"operator":"minBy","coreOperator":"Min","category":"Mathematical and Aggregate Operators"},{"operator":"multicast","coreOperator":"Publish","category":"Connectable Observable Operators"},{"operator":"never","coreOperator":"Empty/Never/Throw","category":"Creating Observables"},{"operator":"observeOn","coreOperator":"ObserveOn","category":"Observable Utility Operators"},{"operator":"of","coreOperator":"From","category":"Creating Observables"},{"operator":"ofArrayChanges","coreOperator":"From","category":"Creating Observables"},{"operator":"ofObjectChanges","coreOperator":"From","category":"Creating Observables"},{"operator":"ofWithScheduler","coreOperator":"From","category":"Creating Observables"},{"operator":"onErrorResumeNext","coreOperator":"Catch","category":"Error Handling Operators"},{"operator":"pairs","coreOperator":"From","category":"Creating Observables"},{"operator":"pausable","coreOperator":"backpressure operators","category":"Backpressure Operators"},{"operator":"pausableBuffered","coreOperator":"backpressure operators","category":"Backpressure Operators"},{"operator":"pluck","coreOperator":"Map","category":"Transforming Observables"},{"operator":"publish","coreOperator":"Publish","category":"Connectable Observable Operators"},{"operator":"publishLast","coreOperator":"Publish","category":"Connectable Observable Operators"},{"operator":"publishValue","coreOperator":"Publish","category":"Connectable Observable Operators"},{"operator":"range","coreOperator":"Range","category":"Creating Observables"},{"operator":"reduce","coreOperator":"Reduce","category":"Mathematical and Aggregate Operators"},{"operator":"refCount","coreOperator":"RefCount","category":"Connectable Observable Operators"},{"operator":"repeat","coreOperator":"Repeat","category":"Creating Observables"},{"operator":"replay","coreOperator":"Replay","category":"Connectable Observable Operators"},{"operator":"retry","coreOperator":"Retry","category":"Error Handling Operators"},{"operator":"return","coreOperator":"Just","category":"Creating Observables"},{"operator":"sample","coreOperator":"Sample","category":"Filtering Observables"},{"operator":"scan","coreOperator":"Scan","category":"Transforming Observables"},{"operator":"select","coreOperator":"Map","category":"Transforming Observables"},{"operator":"selectConcat","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"selectConcatObserver","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"selectMany","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"selectManyObserver","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"selectSwitch","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"selectSwitchFirst","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"selectWithMatchConcurrent","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"sequenceEqual","coreOperator":"SequenceEqual","category":"Conditional and Boolean Operators"},{"operator":"share","coreOperator":"RefCount","category":"Connectable Observable Operators"},{"operator":"shareReplay","coreOperator":"Replay","category":"Connectable Observable Operators"},{"operator":"shareValue","coreOperator":"RefCount","category":"Connectable Observable Operators"},{"operator":"single","coreOperator":"First","category":"Filtering Observables"},{"operator":"skip","coreOperator":"Skip","category":"Filtering Observables"},{"operator":"skipLast","coreOperator":"SkipLast","category":"Filtering Observables"},{"operator":"skipLastWithTime","coreOperator":"SkipLast","category":"Filtering Observables"},{"operator":"skipUntil","coreOperator":"SkipUntil","category":"Conditional and Boolean Operators"},{"operator":"skipUntilWithTime","coreOperator":"Skip","category":"Filtering Observables"},{"operator":"skipWhile","coreOperator":"SkipWhile","category":"Conditional and Boolean Operators"},{"operator":"start","coreOperator":"Start","category":"Creating Observables"},{"operator":"startAsync","coreOperator":"Start","category":"Creating Observables"},{"operator":"startWith","coreOperator":"StartWith","category":"Combining Observables"},{"operator":"stopAndWait","coreOperator":"backpressure operators","category":"Backpressure Operators"},{"operator":"subscribe","coreOperator":"Subscribe","category":"Observable Utility Operators"},{"operator":"subscribeOn","coreOperator":"SubscribeOn","category":"Observable Utility Operators"},{"operator":"subscribeOnCompleted","coreOperator":"Subscribe","category":"Observable Utility Operators"},{"operator":"subscribeOnError","coreOperator":"Subscribe","category":"Observable Utility Operators"},{"operator":"subscribeOnNext","coreOperator":"Subscribe","category":"Observable Utility Operators"},{"operator":"sum","coreOperator":"Sum","category":"Mathematical and Aggregate Operators"},{"operator":"switch","coreOperator":"Switch","category":"Combining Observables"},{"operator":"switchCase","coreOperator":"Defer","category":"Creating Observables"},{"operator":"switchMap","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"take","coreOperator":"Take","category":"Filtering Observables"},{"operator":"takeLast","coreOperator":"TakeLast","category":"Filtering Observables"},{"operator":"takeLastBuffer","coreOperator":"TakeLast","category":"Filtering Observables"},{"operator":"takeLastBufferWithTime","coreOperator":"TakeLast","category":"Filtering Observables"},{"operator":"takeLastWithTime","coreOperator":"TakeLast","category":"Filtering Observables"},{"operator":"takeUntil","coreOperator":"TakeUntil","category":"Conditional and Boolean Operators"},{"operator":"takeUntilWithTime","coreOperator":"Take","category":"Filtering Observables"},{"operator":"takeWhile","coreOperator":"TakeWhile","category":"Conditional and Boolean Operators"},{"operator":"tap","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"tapOnCompleted","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"tapOnError","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"tapOnNext","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"thenDo","coreOperator":"And/Then/When","category":"Combining Observables"},{"operator":"throttleFirst","coreOperator":"Sample","category":"Filtering Observables"},{"operator":"throttleWithTimeout","coreOperator":"Debounce","category":"Filtering Observables"},{"operator":"throw","coreOperator":"Empty/Never/Throw","category":"Creating Observables"},{"operator":"timeInterval","coreOperator":"TimeInterval","category":"Observable Utility Operators"},{"operator":"timeout","coreOperator":"Timeout","category":"Observable Utility Operators"},{"operator":"timeoutWithSelector","coreOperator":"Timeout","category":"Observable Utility Operators"},{"operator":"timer","coreOperator":"Timer","category":"Creating Observables"},{"operator":"timestamp","coreOperator":"Timestamp","category":"Observable Utility Operators"},{"operator":"toArray","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"toAsync","coreOperator":"Start","category":"Creating Observables"},{"operator":"toMap","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"toSet","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"using","coreOperator":"Using","category":"Observable Utility Operators"},{"operator":"when","coreOperator":"And/Then/When","category":"Combining Observables"},{"operator":"where","coreOperator":"Filter","category":"Filtering Observables"},{"operator":"while","coreOperator":"Repeat","category":"Creating Observables"},{"operator":"window","coreOperator":"Window","category":"Transforming Observables"},{"operator":"windowed","coreOperator":"backpressure operators","category":"Backpressure Operators"},{"operator":"windowWithCount","coreOperator":"Window","category":"Transforming Observables"},{"operator":"windowWithTime","coreOperator":"Window","category":"Transforming Observables"},{"operator":"windowWithTimeOrCount","coreOperator":"Window","category":"Transforming Observables"},{"operator":"withLatestFrom","coreOperator":"CombineLatest","category":"Combining Observables"},{"operator":"zip","coreOperator":"Zip","category":"Combining Observables"},{"operator":"zipArray","coreOperator":"Zip","category":"Combining Observables"}]},{"distribution":"RxKotlin","operators":[{"operator":"all","coreOperator":"All","category":"Conditional and Boolean Operators"},{"operator":"amb","coreOperator":"Amb","category":"Conditional and Boolean Operators"},{"operator":"ambWith","coreOperator":"Amb","category":"Conditional and Boolean Operators"},{"operator":"and","coreOperator":"And/Then/When","category":"Combining Observables"},{"operator":"asObservable","coreOperator":"Empty/Never/Throw","category":"Creating Observables"},{"operator":"asObservable","coreOperator":"From","category":"Creating Observables"},{"operator":"asObservable","coreOperator":"Just","category":"Creating Observables"},{"operator":"asyncAction","coreOperator":"Start","category":"Creating Observables"},{"operator":"asyncFunc","coreOperator":"Start","category":"Creating Observables"},{"operator":"averageDouble","coreOperator":"Average","category":"Mathematical and Aggregate Operators"},{"operator":"averageFloat","coreOperator":"Average","category":"Mathematical and Aggregate Operators"},{"operator":"averageInteger","coreOperator":"Average","category":"Mathematical and Aggregate Operators"},{"operator":"averageLong","coreOperator":"Average","category":"Mathematical and Aggregate Operators"},{"operator":"BlockingObservable.forEach","coreOperator":"Subscribe","category":"Observable Utility Operators"},{"operator":"BlockingObservable.from","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"BlockingObservable.getIterator","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"BlockingObservable.toFuture","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"BlockingObservable.toIterable","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"buffer","coreOperator":"Buffer","category":"Transforming Observables"},{"operator":"cache","coreOperator":"Replay","category":"Connectable Observable Operators"},{"operator":"cast","coreOperator":"Map","category":"Transforming Observables"},{"operator":"collect","coreOperator":"Reduce","category":"Mathematical and Aggregate Operators"},{"operator":"combineLatest","coreOperator":"CombineLatest","category":"Combining Observables"},{"operator":"concat","coreOperator":"Concat","category":"Mathematical and Aggregate Operators"},{"operator":"concatMap","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"concatWith","coreOperator":"Concat","category":"Mathematical and Aggregate Operators"},{"operator":"connect","coreOperator":"Connect","category":"Connectable Observable Operators"},{"operator":"contains","coreOperator":"Contains","category":"Conditional and Boolean Operators"},{"operator":"count","coreOperator":"Count","category":"Mathematical and Aggregate Operators"},{"operator":"create","coreOperator":"Create","category":"Creating Observables"},{"operator":"debounce","coreOperator":"Debounce","category":"Filtering Observables"},{"operator":"defaultIfEmpty","coreOperator":"DefaultIfEmpty","category":"Conditional and Boolean Operators"},{"operator":"defer","coreOperator":"Defer","category":"Creating Observables"},{"operator":"deferFuture","coreOperator":"Start","category":"Creating Observables"},{"operator":"delay","coreOperator":"Delay","category":"Observable Utility Operators"},{"operator":"delaySubscription","coreOperator":"Delay","category":"Observable Utility Operators"},{"operator":"dematerialize","coreOperator":"Materialize/Dematerialize","category":"Observable Utility Operators"},{"operator":"distinct","coreOperator":"Distinct","category":"Filtering Observables"},{"operator":"distinctUntilChanged","coreOperator":"Distinct","category":"Filtering Observables"},{"operator":"doOnCompleted","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"doOnEach","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"doOnError","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"doOnNext","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"doOnSubscribe","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"doOnTerminate","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"doOnUnsubscribe","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"doWhile","coreOperator":"Repeat","category":"Creating Observables"},{"operator":"elementAt","coreOperator":"ElementAt","category":"Filtering Observables"},{"operator":"elementAtOrDefault","coreOperator":"ElementAt","category":"Filtering Observables"},{"operator":"empty","coreOperator":"Empty/Never/Throw","category":"Creating Observables"},{"operator":"error","coreOperator":"Empty/Never/Throw","category":"Creating Observables"},{"operator":"exists","coreOperator":"Contains","category":"Conditional and Boolean Operators"},{"operator":"filter","coreOperator":"Filter","category":"Filtering Observables"},{"operator":"finallyDo","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"first","coreOperator":"First","category":"Filtering Observables"},{"operator":"firstOrDefault","coreOperator":"First","category":"Filtering Observables"},{"operator":"flatMap","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"flatMapIterable","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"forEach","coreOperator":"Subscribe","category":"Observable Utility Operators"},{"operator":"forEachFuture","coreOperator":"Start","category":"Creating Observables"},{"operator":"from","coreOperator":"From","category":"Creating Observables"},{"operator":"fromAction","coreOperator":"Start","category":"Creating Observables"},{"operator":"fromCallable","coreOperator":"Start","category":"Creating Observables"},{"operator":"fromFunc0","coreOperator":"Start","category":"Creating Observables"},{"operator":"fromRunnable","coreOperator":"Start","category":"Creating Observables"},{"operator":"groupBy","coreOperator":"GroupBy","category":"Transforming Observables"},{"operator":"groupJoin","coreOperator":"Join","category":"Combining Observables"},{"operator":"ignoreElements","coreOperator":"IgnoreElements","category":"Filtering Observables"},{"operator":"interval","coreOperator":"Interval","category":"Creating Observables"},{"operator":"join","coreOperator":"Join","category":"Combining Observables"},{"operator":"just","coreOperator":"Just","category":"Creating Observables"},{"operator":"last","coreOperator":"Last","category":"Filtering Observables"},{"operator":"lastOrDefault","coreOperator":"Last","category":"Filtering Observables"},{"operator":"map","coreOperator":"Map","category":"Transforming Observables"},{"operator":"materialize","coreOperator":"Materialize/Dematerialize","category":"Observable Utility Operators"},{"operator":"max","coreOperator":"Max","category":"Mathematical and Aggregate Operators"},{"operator":"maxBy","coreOperator":"Max","category":"Mathematical and Aggregate Operators"},{"operator":"merge","coreOperator":"Merge","category":"Combining Observables"},{"operator":"mergeDelayError","coreOperator":"Merge","category":"Combining Observables"},{"operator":"mergeWith","coreOperator":"Merge","category":"Combining Observables"},{"operator":"min","coreOperator":"Min","category":"Mathematical and Aggregate Operators"},{"operator":"minBy","coreOperator":"Min","category":"Mathematical and Aggregate Operators"},{"operator":"mostRecent","coreOperator":"First","category":"Filtering Observables"},{"operator":"never","coreOperator":"Empty/Never/Throw","category":"Creating Observables"},{"operator":"observeOn","coreOperator":"ObserveOn","category":"Observable Utility Operators"},{"operator":"ofType","coreOperator":"Filter","category":"Filtering Observables"},{"operator":"onErrorResumeNext","coreOperator":"Catch","category":"Error Handling Operators"},{"operator":"onErrorReturn","coreOperator":"Catch","category":"Error Handling Operators"},{"operator":"onExceptionResumeNext","coreOperator":"Catch","category":"Error Handling Operators"},{"operator":"publish","coreOperator":"Publish","category":"Connectable Observable Operators"},{"operator":"range","coreOperator":"Range","category":"Creating Observables"},{"operator":"reduce","coreOperator":"Reduce","category":"Mathematical and Aggregate Operators"},{"operator":"refCount","coreOperator":"RefCount","category":"Connectable Observable Operators"},{"operator":"repeat","coreOperator":"Repeat","category":"Creating Observables"},{"operator":"repeatWhen","coreOperator":"Repeat","category":"Creating Observables"},{"operator":"replay","coreOperator":"Replay","category":"Connectable Observable Operators"},{"operator":"retry","coreOperator":"Retry","category":"Error Handling Operators"},{"operator":"retryWhen","coreOperator":"Retry","category":"Error Handling Operators"},{"operator":"sample","coreOperator":"Sample","category":"Filtering Observables"},{"operator":"scan","coreOperator":"Scan","category":"Transforming Observables"},{"operator":"sequenceEqual","coreOperator":"SequenceEqual","category":"Conditional and Boolean Operators"},{"operator":"serialize","coreOperator":"Serialize","category":"Observable Utility Operators"},{"operator":"share","coreOperator":"RefCount","category":"Connectable Observable Operators"},{"operator":"single","coreOperator":"First","category":"Filtering Observables"},{"operator":"singleOrDefault","coreOperator":"First","category":"Filtering Observables"},{"operator":"skip","coreOperator":"Skip","category":"Filtering Observables"},{"operator":"skipLast","coreOperator":"SkipLast","category":"Filtering Observables"},{"operator":"skipUntil","coreOperator":"SkipUntil","category":"Conditional and Boolean Operators"},{"operator":"skipWhile","coreOperator":"SkipWhile","category":"Conditional and Boolean Operators"},{"operator":"start","coreOperator":"Start","category":"Creating Observables"},{"operator":"startFuture","coreOperator":"Start","category":"Creating Observables"},{"operator":"startWith","coreOperator":"StartWith","category":"Combining Observables"},{"operator":"subscribe","coreOperator":"Subscribe","category":"Observable Utility Operators"},{"operator":"subscribeOn","coreOperator":"SubscribeOn","category":"Observable Utility Operators"},{"operator":"sumDouble","coreOperator":"Sum","category":"Mathematical and Aggregate Operators"},{"operator":"sumFloat","coreOperator":"Sum","category":"Mathematical and Aggregate Operators"},{"operator":"sumInteger","coreOperator":"Sum","category":"Mathematical and Aggregate Operators"},{"operator":"sumLong","coreOperator":"Sum","category":"Mathematical and Aggregate Operators"},{"operator":"switchCase","coreOperator":"Defer","category":"Creating Observables"},{"operator":"switchMap","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"switchOnNext","coreOperator":"Switch","category":"Combining Observables"},{"operator":"take","coreOperator":"Take","category":"Filtering Observables"},{"operator":"takeFirst","coreOperator":"First","category":"Filtering Observables"},{"operator":"takeLast","coreOperator":"Last","category":"Filtering Observables"},{"operator":"takeLast","coreOperator":"TakeLast","category":"Filtering Observables"},{"operator":"takeLastBuffer","coreOperator":"TakeLast","category":"Filtering Observables"},{"operator":"takeUntil","coreOperator":"TakeUntil","category":"Conditional and Boolean Operators"},{"operator":"takeWhile","coreOperator":"TakeWhile","category":"Conditional and Boolean Operators"},{"operator":"then","coreOperator":"And/Then/When","category":"Combining Observables"},{"operator":"throttleFirst","coreOperator":"Sample","category":"Filtering Observables"},{"operator":"throttleLast","coreOperator":"Sample","category":"Filtering Observables"},{"operator":"throttleWithTimeout","coreOperator":"Debounce","category":"Filtering Observables"},{"operator":"timeInterval","coreOperator":"TimeInterval","category":"Observable Utility Operators"},{"operator":"timeout","coreOperator":"Timeout","category":"Observable Utility Operators"},{"operator":"timer","coreOperator":"Timer","category":"Creating Observables"},{"operator":"timestamp","coreOperator":"Timestamp","category":"Observable Utility Operators"},{"operator":"toAsync","coreOperator":"Start","category":"Creating Observables"},{"operator":"toBlocking","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"toList","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"toMap","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"toMultiMap","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"toSortedList","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"unsubscribeOn","coreOperator":"SubscribeOn","category":"Observable Utility Operators"},{"operator":"using","coreOperator":"Using","category":"Observable Utility Operators"},{"operator":"when","coreOperator":"And/Then/When","category":"Combining Observables"},{"operator":"whileDo","coreOperator":"Repeat","category":"Creating Observables"},{"operator":"window","coreOperator":"Window","category":"Transforming Observables"},{"operator":"zip","coreOperator":"Zip","category":"Combining Observables"},{"operator":"zipWith","coreOperator":"Zip","category":"Combining Observables"}]},{"distribution":"RxNET","operators":[{"operator":"Aggregate","coreOperator":"Reduce","category":"Mathematical and Aggregate Operators"},{"operator":"All","coreOperator":"All","category":"Conditional and Boolean Operators"},{"operator":"Amb","coreOperator":"Amb","category":"Conditional and Boolean Operators"},{"operator":"And","coreOperator":"And/Then/When","category":"Combining Observables"},{"operator":"Any","coreOperator":"Contains","category":"Conditional and Boolean Operators"},{"operator":"AsObservable","coreOperator":"From","category":"Creating Observables"},{"operator":"AssertEqual","coreOperator":"SequenceEqual","category":"Conditional and Boolean Operators"},{"operator":"Average","coreOperator":"Average","category":"Mathematical and Aggregate Operators"},{"operator":"Buffer","coreOperator":"Buffer","category":"Transforming Observables"},{"operator":"Cast","coreOperator":"Map","category":"Transforming Observables"},{"operator":"Catch","coreOperator":"Catch","category":"Error Handling Operators"},{"operator":"CombineLatest","coreOperator":"CombineLatest","category":"Combining Observables"},{"operator":"Concat","coreOperator":"Concat","category":"Mathematical and Aggregate Operators"},{"operator":"Connect","coreOperator":"Connect","category":"Connectable Observable Operators"},{"operator":"Contains","coreOperator":"Contains","category":"Conditional and Boolean Operators"},{"operator":"Count","coreOperator":"Count","category":"Mathematical and Aggregate Operators"},{"operator":"Create","coreOperator":"Create","category":"Creating Observables"},{"operator":"DefaultIfEmpty","coreOperator":"DefaultIfEmpty","category":"Conditional and Boolean Operators"},{"operator":"Defer","coreOperator":"Defer","category":"Creating Observables"},{"operator":"Delay","coreOperator":"Delay","category":"Observable Utility Operators"},{"operator":"DelaySubscription","coreOperator":"Delay","category":"Observable Utility Operators"},{"operator":"dematerialize","coreOperator":"Materialize/Dematerialize","category":"Observable Utility Operators"},{"operator":"Distinct","coreOperator":"Distinct","category":"Filtering Observables"},{"operator":"DistinctUntilChanged","coreOperator":"Distinct","category":"Filtering Observables"},{"operator":"Do","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"ElementAt","coreOperator":"ElementAt","category":"Filtering Observables"},{"operator":"ElementAtOrDefault","coreOperator":"ElementAt","category":"Filtering Observables"},{"operator":"Empty","coreOperator":"Empty/Never/Throw","category":"Creating Observables"},{"operator":"Finally","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"First","coreOperator":"First","category":"Filtering Observables"},{"operator":"FirstOrDefault","coreOperator":"First","category":"Filtering Observables"},{"operator":"ForEach","coreOperator":"Subscribe","category":"Observable Utility Operators"},{"operator":"FromAsyncPattern","coreOperator":"From","category":"Creating Observables"},{"operator":"FromEvent","coreOperator":"From","category":"Creating Observables"},{"operator":"FromEventPattern","coreOperator":"From","category":"Creating Observables"},{"operator":"Generate","coreOperator":"Create","category":"Creating Observables"},{"operator":"GetEnumerator","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"GroupBy","coreOperator":"GroupBy","category":"Transforming Observables"},{"operator":"GroupByUntil","coreOperator":"GroupBy","category":"Transforming Observables"},{"operator":"GroupJoin","coreOperator":"Join","category":"Combining Observables"},{"operator":"IgnoreElements","coreOperator":"IgnoreElements","category":"Filtering Observables"},{"operator":"Interval","coreOperator":"Interval","category":"Creating Observables"},{"operator":"Join","coreOperator":"Join","category":"Combining Observables"},{"operator":"Last","coreOperator":"Last","category":"Filtering Observables"},{"operator":"LastOrDefault","coreOperator":"Last","category":"Filtering Observables"},{"operator":"Latest","coreOperator":"First","category":"Filtering Observables"},{"operator":"LongCount","coreOperator":"Count","category":"Mathematical and Aggregate Operators"},{"operator":"ManySelect","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"materialize","coreOperator":"Materialize/Dematerialize","category":"Observable Utility Operators"},{"operator":"Max","coreOperator":"Max","category":"Mathematical and Aggregate Operators"},{"operator":"MaxBy","coreOperator":"Max","category":"Mathematical and Aggregate Operators"},{"operator":"Merge","coreOperator":"Merge","category":"Combining Observables"},{"operator":"Min","coreOperator":"Min","category":"Mathematical and Aggregate Operators"},{"operator":"MinBy","coreOperator":"Min","category":"Mathematical and Aggregate Operators"},{"operator":"Multicast","coreOperator":"Publish","category":"Connectable Observable Operators"},{"operator":"Never","coreOperator":"Empty/Never/Throw","category":"Creating Observables"},{"operator":"Next","coreOperator":"First","category":"Filtering Observables"},{"operator":"ObserveOn","coreOperator":"ObserveOn","category":"Observable Utility Operators"},{"operator":"ObserveOnDispatcher","coreOperator":"ObserveOn","category":"Observable Utility Operators"},{"operator":"OfType","coreOperator":"Filter","category":"Filtering Observables"},{"operator":"OnErrorResumeNext","coreOperator":"Catch","category":"Error Handling Operators"},{"operator":"Publish","coreOperator":"Publish","category":"Connectable Observable Operators"},{"operator":"PublishLast","coreOperator":"Publish","category":"Connectable Observable Operators"},{"operator":"Range","coreOperator":"Range","category":"Creating Observables"},{"operator":"RefCount","coreOperator":"RefCount","category":"Connectable Observable Operators"},{"operator":"Repeat","coreOperator":"Repeat","category":"Creating Observables"},{"operator":"Replay","coreOperator":"Replay","category":"Connectable Observable Operators"},{"operator":"Retry","coreOperator":"Retry","category":"Error Handling Operators"},{"operator":"Return","coreOperator":"Just","category":"Creating Observables"},{"operator":"Sample","coreOperator":"Sample","category":"Filtering Observables"},{"operator":"Scan","coreOperator":"Scan","category":"Transforming Observables"},{"operator":"Select","coreOperator":"Map","category":"Transforming Observables"},{"operator":"SelectMany","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"SequenceEqual","coreOperator":"SequenceEqual","category":"Conditional and Boolean Operators"},{"operator":"Single","coreOperator":"First","category":"Filtering Observables"},{"operator":"SingleOrDefault","coreOperator":"First","category":"Filtering Observables"},{"operator":"Skip","coreOperator":"Skip","category":"Filtering Observables"},{"operator":"SkipLast","coreOperator":"SkipLast","category":"Filtering Observables"},{"operator":"SkipUntil","coreOperator":"SkipUntil","category":"Conditional and Boolean Operators"},{"operator":"SkipWhile","coreOperator":"SkipWhile","category":"Conditional and Boolean Operators"},{"operator":"Start","coreOperator":"Start","category":"Creating Observables"},{"operator":"StartWith","coreOperator":"StartWith","category":"Combining Observables"},{"operator":"Subscribe","coreOperator":"Subscribe","category":"Observable Utility Operators"},{"operator":"SubscribeOn","coreOperator":"SubscribeOn","category":"Observable Utility Operators"},{"operator":"SubscribeOnDispatcher","coreOperator":"SubscribeOn","category":"Observable Utility Operators"},{"operator":"Sum","coreOperator":"Sum","category":"Mathematical and Aggregate Operators"},{"operator":"Switch","coreOperator":"Switch","category":"Combining Observables"},{"operator":"Synchronize","coreOperator":"Serialize","category":"Observable Utility Operators"},{"operator":"Take","coreOperator":"Take","category":"Filtering Observables"},{"operator":"TakeLast","coreOperator":"TakeLast","category":"Filtering Observables"},{"operator":"TakeUntil","coreOperator":"TakeUntil","category":"Conditional and Boolean Operators"},{"operator":"TakeWhile","coreOperator":"TakeWhile","category":"Conditional and Boolean Operators"},{"operator":"Then","coreOperator":"And/Then/When","category":"Combining Observables"},{"operator":"Throttle","coreOperator":"Debounce","category":"Filtering Observables"},{"operator":"Throw","coreOperator":"Empty/Never/Throw","category":"Creating Observables"},{"operator":"TimeInterval","coreOperator":"TimeInterval","category":"Observable Utility Operators"},{"operator":"Timeout","coreOperator":"Timeout","category":"Observable Utility Operators"},{"operator":"Timer","coreOperator":"Timer","category":"Creating Observables"},{"operator":"Timestamp","coreOperator":"Timestamp","category":"Observable Utility Operators"},{"operator":"ToArray","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"ToAsync","coreOperator":"Start","category":"Creating Observables"},{"operator":"ToDictionary","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"ToEnumerable","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"ToEvent","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"ToEventPattern","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"ToList","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"ToLookup","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"ToObservable","coreOperator":"From","category":"Creating Observables"},{"operator":"ToTask","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"Using","coreOperator":"Using","category":"Observable Utility Operators"},{"operator":"When","coreOperator":"And/Then/When","category":"Combining Observables"},{"operator":"Where","coreOperator":"Filter","category":"Filtering Observables"},{"operator":"Window","coreOperator":"Window","category":"Transforming Observables"},{"operator":"Zip","coreOperator":"Zip","category":"Combining Observables"}]},{"distribution":"RxPHP","operators":[{"operator":"asObservable","coreOperator":"From","category":"Creating Observables"},{"operator":"average","coreOperator":"Average","category":"Mathematical and Aggregate Operators"},{"operator":"bufferWithCount","coreOperator":"Buffer","category":"Transforming Observables"},{"operator":"catch","coreOperator":"Catch","category":"Error Handling Operators"},{"operator":"combineLatest","coreOperator":"CombineLatest","category":"Combining Observables"},{"operator":"concat","coreOperator":"Concat","category":"Mathematical and Aggregate Operators"},{"operator":"concatAll","coreOperator":"Concat","category":"Mathematical and Aggregate Operators"},{"operator":"concatMap","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"concatMapTo","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"count","coreOperator":"Count","category":"Mathematical and Aggregate Operators"},{"operator":"create","coreOperator":"Create","category":"Creating Observables"},{"operator":"defaultIfEmpty","coreOperator":"DefaultIfEmpty","category":"Conditional and Boolean Operators"},{"operator":"defer","coreOperator":"Defer","category":"Creating Observables"},{"operator":"delay","coreOperator":"Delay","category":"Observable Utility Operators"},{"operator":"dematerialize","coreOperator":"Materialize/Dematerialize","category":"Observable Utility Operators"},{"operator":"distinct","coreOperator":"Distinct","category":"Filtering Observables"},{"operator":"distinctKey","coreOperator":"Distinct","category":"Filtering Observables"},{"operator":"distinctUntilChanged","coreOperator":"Distinct","category":"Filtering Observables"},{"operator":"distinctUntilKeyChanged","coreOperator":"Distinct","category":"Filtering Observables"},{"operator":"do","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"doOnCompleted","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"doOnError","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"empty","coreOperator":"Empty/Never/Throw","category":"Creating Observables"},{"operator":"error","coreOperator":"Empty/Never/Throw","category":"Creating Observables"},{"operator":"filter","coreOperator":"Filter","category":"Filtering Observables"},{"operator":"finally","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"flatMap","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"flatMapLatest","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"flatMapTo","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"forkJoin","coreOperator":"Zip","category":"Combining Observables"},{"operator":"fromArray","coreOperator":"From","category":"Creating Observables"},{"operator":"fromIterator","coreOperator":"From","category":"Creating Observables"},{"operator":"fromPromise","coreOperator":"From","category":"Creating Observables"},{"operator":"groupBy","coreOperator":"GroupBy","category":"Transforming Observables"},{"operator":"groupByUntil","coreOperator":"GroupBy","category":"Transforming Observables"},{"operator":"interval","coreOperator":"Interval","category":"Creating Observables"},{"operator":"isEmpty","coreOperator":"Contains","category":"Conditional and Boolean Operators"},{"operator":"map","coreOperator":"Map","category":"Transforming Observables"},{"operator":"mapTo","coreOperator":"Map","category":"Transforming Observables"},{"operator":"mapWithIndex","coreOperator":"Map","category":"Transforming Observables"},{"operator":"materialize","coreOperator":"Materialize/Dematerialize","category":"Observable Utility Operators"},{"operator":"max","coreOperator":"Max","category":"Mathematical and Aggregate Operators"},{"operator":"merge","coreOperator":"Merge","category":"Combining Observables"},{"operator":"mergeAll","coreOperator":"Merge","category":"Combining Observables"},{"operator":"min","coreOperator":"Min","category":"Mathematical and Aggregate Operators"},{"operator":"multicast","coreOperator":"Publish","category":"Connectable Observable Operators"},{"operator":"multicastWithSelector","coreOperator":"Publish","category":"Connectable Observable Operators"},{"operator":"never","coreOperator":"Empty/Never/Throw","category":"Creating Observables"},{"operator":"of","coreOperator":"Just","category":"Creating Observables"},{"operator":"partition","coreOperator":"GroupBy","category":"Transforming Observables"},{"operator":"pluck","coreOperator":"Map","category":"Transforming Observables"},{"operator":"publish","coreOperator":"Publish","category":"Connectable Observable Operators"},{"operator":"publishLast","coreOperator":"Publish","category":"Connectable Observable Operators"},{"operator":"publishValue","coreOperator":"Publish","category":"Connectable Observable Operators"},{"operator":"race","coreOperator":"Amb","category":"Conditional and Boolean Operators"},{"operator":"range","coreOperator":"Range","category":"Creating Observables"},{"operator":"reduce","coreOperator":"Reduce","category":"Mathematical and Aggregate Operators"},{"operator":"repeat","coreOperator":"Repeat","category":"Creating Observables"},{"operator":"repeatWhen","coreOperator":"Repeat","category":"Creating Observables"},{"operator":"replay","coreOperator":"Replay","category":"Connectable Observable Operators"},{"operator":"retry","coreOperator":"Retry","category":"Error Handling Operators"},{"operator":"retryWhen","coreOperator":"Retry","category":"Error Handling Operators"},{"operator":"scan","coreOperator":"Scan","category":"Transforming Observables"},{"operator":"select","coreOperator":"Map","category":"Transforming Observables"},{"operator":"selectMany","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"share","coreOperator":"RefCount","category":"Connectable Observable Operators"},{"operator":"shareReplay","coreOperator":"Replay","category":"Connectable Observable Operators"},{"operator":"shareValue","coreOperator":"RefCount","category":"Connectable Observable Operators"},{"operator":"singleInstance","coreOperator":"RefCount","category":"Connectable Observable Operators"},{"operator":"skip","coreOperator":"Skip","category":"Filtering Observables"},{"operator":"skipLast","coreOperator":"SkipLast","category":"Filtering Observables"},{"operator":"skipUntil","coreOperator":"SkipUntil","category":"Conditional and Boolean Operators"},{"operator":"skipWhile","coreOperator":"SkipWhile","category":"Conditional and Boolean Operators"},{"operator":"skipWhileWithIndex","coreOperator":"SkipWhile","category":"Conditional and Boolean Operators"},{"operator":"start","coreOperator":"Start","category":"Creating Observables"},{"operator":"startWith","coreOperator":"StartWith","category":"Combining Observables"},{"operator":"startWithArray","coreOperator":"StartWith","category":"Combining Observables"},{"operator":"subscribe","coreOperator":"Subscribe","category":"Observable Utility Operators"},{"operator":"sum","coreOperator":"Sum","category":"Mathematical and Aggregate Operators"},{"operator":"switch","coreOperator":"Switch","category":"Combining Observables"},{"operator":"switchFirst","coreOperator":"Switch","category":"Combining Observables"},{"operator":"take","coreOperator":"Take","category":"Filtering Observables"},{"operator":"takeLast","coreOperator":"TakeLast","category":"Filtering Observables"},{"operator":"takeUntil","coreOperator":"Take","category":"Filtering Observables"},{"operator":"takeUntil","coreOperator":"TakeUntil","category":"Conditional and Boolean Operators"},{"operator":"takeWhile","coreOperator":"TakeWhile","category":"Conditional and Boolean Operators"},{"operator":"takeWhileWithIndex","coreOperator":"TakeWhile","category":"Conditional and Boolean Operators"},{"operator":"throttle","coreOperator":"Debounce","category":"Filtering Observables"},{"operator":"timeout","coreOperator":"Timeout","category":"Observable Utility Operators"},{"operator":"timer","coreOperator":"Timer","category":"Creating Observables"},{"operator":"timestamp","coreOperator":"Timestamp","category":"Observable Utility Operators"},{"operator":"toArray","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"where","coreOperator":"Filter","category":"Filtering Observables"},{"operator":"withLatestFrom","coreOperator":"CombineLatest","category":"Combining Observables"},{"operator":"zip","coreOperator":"Zip","category":"Combining Observables"}]},{"distribution":"RxPY","operators":[{"operator":"aggregate","coreOperator":"Reduce","category":"Mathematical and Aggregate Operators"},{"operator":"all","coreOperator":"All","category":"Conditional and Boolean Operators"},{"operator":"amb","coreOperator":"Amb","category":"Conditional and Boolean Operators"},{"operator":"and_","coreOperator":"And/Then/When","category":"Combining Observables"},{"operator":"average","coreOperator":"Average","category":"Mathematical and Aggregate Operators"},{"operator":"BlockingObservable.for_each","coreOperator":"Subscribe","category":"Observable Utility Operators"},{"operator":"BlockingObservable.to_iterable","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"buffer","coreOperator":"Buffer","category":"Transforming Observables"},{"operator":"buffer_with_count","coreOperator":"Buffer","category":"Transforming Observables"},{"operator":"buffer_with_time","coreOperator":"Buffer","category":"Transforming Observables"},{"operator":"buffer_with_time_or_count","coreOperator":"Buffer","category":"Transforming Observables"},{"operator":"case","coreOperator":"Defer","category":"Creating Observables"},{"operator":"catch_exception","coreOperator":"Catch","category":"Error Handling Operators"},{"operator":"combine_latest","coreOperator":"CombineLatest","category":"Combining Observables"},{"operator":"concat","coreOperator":"Concat","category":"Mathematical and Aggregate Operators"},{"operator":"concat_all","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"concatAll","coreOperator":"Concat","category":"Mathematical and Aggregate Operators"},{"operator":"connect","coreOperator":"Connect","category":"Connectable Observable Operators"},{"operator":"contains","coreOperator":"Contains","category":"Conditional and Boolean Operators"},{"operator":"count","coreOperator":"Count","category":"Mathematical and Aggregate Operators"},{"operator":"create","coreOperator":"Create","category":"Creating Observables"},{"operator":"debounce","coreOperator":"Debounce","category":"Filtering Observables"},{"operator":"default_if_empty","coreOperator":"DefaultIfEmpty","category":"Conditional and Boolean Operators"},{"operator":"defer","coreOperator":"Defer","category":"Creating Observables"},{"operator":"delay","coreOperator":"Delay","category":"Observable Utility Operators"},{"operator":"delay_subscription","coreOperator":"Delay","category":"Observable Utility Operators"},{"operator":"delay_with_selector","coreOperator":"Delay","category":"Observable Utility Operators"},{"operator":"dematerialize","coreOperator":"Materialize/Dematerialize","category":"Observable Utility Operators"},{"operator":"distinct","coreOperator":"Distinct","category":"Filtering Observables"},{"operator":"distinct_until_changed","coreOperator":"Distinct","category":"Filtering Observables"},{"operator":"do_action","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"do_while","coreOperator":"Repeat","category":"Creating Observables"},{"operator":"element_at","coreOperator":"ElementAt","category":"Filtering Observables"},{"operator":"element_at_or_default","coreOperator":"ElementAt","category":"Filtering Observables"},{"operator":"empty","coreOperator":"Empty/Never/Throw","category":"Creating Observables"},{"operator":"every","coreOperator":"All","category":"Conditional and Boolean Operators"},{"operator":"exclusive","coreOperator":"Switch","category":"Combining Observables"},{"operator":"expand","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"expand","coreOperator":"Reduce","category":"Mathematical and Aggregate Operators"},{"operator":"filter","coreOperator":"Filter","category":"Filtering Observables"},{"operator":"finally_action","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"find","coreOperator":"Contains","category":"Conditional and Boolean Operators"},{"operator":"find_index","coreOperator":"Contains","category":"Conditional and Boolean Operators"},{"operator":"first","coreOperator":"First","category":"Filtering Observables"},{"operator":"first_or_default","coreOperator":"First","category":"Filtering Observables"},{"operator":"flat_map","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"for_in","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"from_array","coreOperator":"From","category":"Creating Observables"},{"operator":"from_callback","coreOperator":"From","category":"Creating Observables"},{"operator":"from_future","coreOperator":"From","category":"Creating Observables"},{"operator":"from_iterable","coreOperator":"From","category":"Creating Observables"},{"operator":"from_list","coreOperator":"From","category":"Creating Observables"},{"operator":"from_marbles","coreOperator":"From","category":"Creating Observables"},{"operator":"generate","coreOperator":"Create","category":"Creating Observables"},{"operator":"generate_with_relative_time","coreOperator":"Create","category":"Creating Observables"},{"operator":"group_by","coreOperator":"GroupBy","category":"Transforming Observables"},{"operator":"group_by_until","coreOperator":"GroupBy","category":"Transforming Observables"},{"operator":"group_join","coreOperator":"Join","category":"Combining Observables"},{"operator":"if_then","coreOperator":"Defer","category":"Creating Observables"},{"operator":"ignore_elements","coreOperator":"IgnoreElements","category":"Filtering Observables"},{"operator":"interval","coreOperator":"Interval","category":"Creating Observables"},{"operator":"is_empty","coreOperator":"Contains","category":"Conditional and Boolean Operators"},{"operator":"join","coreOperator":"Join","category":"Combining Observables"},{"operator":"just","coreOperator":"Just","category":"Creating Observables"},{"operator":"last","coreOperator":"Last","category":"Filtering Observables"},{"operator":"last_or_default","coreOperator":"Last","category":"Filtering Observables"},{"operator":"let","coreOperator":"Publish","category":"Connectable Observable Operators"},{"operator":"let_bind","coreOperator":"Publish","category":"Connectable Observable Operators"},{"operator":"many_select","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"map","coreOperator":"Map","category":"Transforming Observables"},{"operator":"materialize","coreOperator":"Materialize/Dematerialize","category":"Observable Utility Operators"},{"operator":"max","coreOperator":"Max","category":"Mathematical and Aggregate Operators"},{"operator":"max_by","coreOperator":"Max","category":"Mathematical and Aggregate Operators"},{"operator":"merge","coreOperator":"Merge","category":"Combining Observables"},{"operator":"merge_all","coreOperator":"Merge","category":"Combining Observables"},{"operator":"merge_observable","coreOperator":"Merge","category":"Combining Observables"},{"operator":"min","coreOperator":"Min","category":"Mathematical and Aggregate Operators"},{"operator":"min_by","coreOperator":"Min","category":"Mathematical and Aggregate Operators"},{"operator":"multicast","coreOperator":"Publish","category":"Connectable Observable Operators"},{"operator":"never","coreOperator":"Empty/Never/Throw","category":"Creating Observables"},{"operator":"observe_on","coreOperator":"ObserveOn","category":"Observable Utility Operators"},{"operator":"of","coreOperator":"From","category":"Creating Observables"},{"operator":"on_error_resume_next","coreOperator":"Catch","category":"Error Handling Operators"},{"operator":"pairwise","coreOperator":"Buffer","category":"Transforming Observables"},{"operator":"partition","coreOperator":"GroupBy","category":"Transforming Observables"},{"operator":"pluck","coreOperator":"Map","category":"Transforming Observables"},{"operator":"publish","coreOperator":"Publish","category":"Connectable Observable Operators"},{"operator":"publishValue","coreOperator":"Publish","category":"Connectable Observable Operators"},{"operator":"range","coreOperator":"Range","category":"Creating Observables"},{"operator":"reduce","coreOperator":"Reduce","category":"Mathematical and Aggregate Operators"},{"operator":"ref_count","coreOperator":"RefCount","category":"Connectable Observable Operators"},{"operator":"repeat","coreOperator":"Repeat","category":"Creating Observables"},{"operator":"replay","coreOperator":"Replay","category":"Connectable Observable Operators"},{"operator":"retry","coreOperator":"Retry","category":"Error Handling Operators"},{"operator":"return_value","coreOperator":"Just","category":"Creating Observables"},{"operator":"sample","coreOperator":"Sample","category":"Filtering Observables"},{"operator":"scan","coreOperator":"Scan","category":"Transforming Observables"},{"operator":"select","coreOperator":"Map","category":"Transforming Observables"},{"operator":"select_many","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"select_switch","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"select_switch","coreOperator":"Switch","category":"Combining Observables"},{"operator":"sequence_equal","coreOperator":"SequenceEqual","category":"Conditional and Boolean Operators"},{"operator":"single","coreOperator":"First","category":"Filtering Observables"},{"operator":"single_or_default","coreOperator":"First","category":"Filtering Observables"},{"operator":"skip","coreOperator":"Skip","category":"Filtering Observables"},{"operator":"skip_last","coreOperator":"SkipLast","category":"Filtering Observables"},{"operator":"skip_last_with_time","coreOperator":"SkipLast","category":"Filtering Observables"},{"operator":"skip_while","coreOperator":"SkipWhile","category":"Conditional and Boolean Operators"},{"operator":"skip_with_time","coreOperator":"Skip","category":"Filtering Observables"},{"operator":"skipUntil","coreOperator":"SkipUntil","category":"Conditional and Boolean Operators"},{"operator":"skipUntil_with_time","coreOperator":"SkipUntil","category":"Conditional and Boolean Operators"},{"operator":"slice","coreOperator":"Filter","category":"Filtering Observables"},{"operator":"some","coreOperator":"Contains","category":"Conditional and Boolean Operators"},{"operator":"start","coreOperator":"Start","category":"Creating Observables"},{"operator":"start_async","coreOperator":"Start","category":"Creating Observables"},{"operator":"start_with","coreOperator":"StartWith","category":"Combining Observables"},{"operator":"subscribe","coreOperator":"Subscribe","category":"Observable Utility Operators"},{"operator":"subscribe_on","coreOperator":"SubscribeOn","category":"Observable Utility Operators"},{"operator":"sum","coreOperator":"Sum","category":"Mathematical and Aggregate Operators"},{"operator":"switch_case","coreOperator":"Defer","category":"Creating Observables"},{"operator":"switch_latest","coreOperator":"Switch","category":"Combining Observables"},{"operator":"take","coreOperator":"Take","category":"Filtering Observables"},{"operator":"take_last","coreOperator":"TakeLast","category":"Filtering Observables"},{"operator":"take_last_buffer","coreOperator":"TakeLast","category":"Filtering Observables"},{"operator":"take_last_with_time","coreOperator":"TakeLast","category":"Filtering Observables"},{"operator":"take_until","coreOperator":"TakeUntil","category":"Conditional and Boolean Operators"},{"operator":"take_until_with_time","coreOperator":"TakeUntil","category":"Conditional and Boolean Operators"},{"operator":"take_while","coreOperator":"TakeWhile","category":"Conditional and Boolean Operators"},{"operator":"take_with_time","coreOperator":"Take","category":"Filtering Observables"},{"operator":"tap","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"then_do","coreOperator":"And/Then/When","category":"Combining Observables"},{"operator":"throttle_first","coreOperator":"Sample","category":"Filtering Observables"},{"operator":"throttle_last","coreOperator":"Sample","category":"Filtering Observables"},{"operator":"throttle_with_selector","coreOperator":"Debounce","category":"Filtering Observables"},{"operator":"throttle_with_timeout","coreOperator":"Debounce","category":"Filtering Observables"},{"operator":"throw","coreOperator":"Empty/Never/Throw","category":"Creating Observables"},{"operator":"throw_exception","coreOperator":"Empty/Never/Throw","category":"Creating Observables"},{"operator":"time_interval","coreOperator":"TimeInterval","category":"Observable Utility Operators"},{"operator":"timeout","coreOperator":"Timeout","category":"Observable Utility Operators"},{"operator":"timeout_with_selector","coreOperator":"Timeout","category":"Observable Utility Operators"},{"operator":"timer","coreOperator":"Timer","category":"Creating Observables"},{"operator":"timestamp","coreOperator":"Timestamp","category":"Observable Utility Operators"},{"operator":"to_array","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"to_async","coreOperator":"Start","category":"Creating Observables"},{"operator":"to_blocking","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"to_dict","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"to_future","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"to_iterable","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"to_list","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"to_marbles","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"to_set","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"using","coreOperator":"Using","category":"Observable Utility Operators"},{"operator":"when","coreOperator":"And/Then/When","category":"Combining Observables"},{"operator":"where","coreOperator":"Filter","category":"Filtering Observables"},{"operator":"while_do","coreOperator":"Repeat","category":"Creating Observables"},{"operator":"window","coreOperator":"Window","category":"Transforming Observables"},{"operator":"window_with_count","coreOperator":"Window","category":"Transforming Observables"},{"operator":"window_with_time","coreOperator":"Window","category":"Transforming Observables"},{"operator":"window_with_time_or_count","coreOperator":"Window","category":"Transforming Observables"},{"operator":"with_latest_from","coreOperator":"CombineLatest","category":"Combining Observables"},{"operator":"zip","coreOperator":"Zip","category":"Combining Observables"},{"operator":"zip_array","coreOperator":"Zip","category":"Combining Observables"}]},{"distribution":"Rxrb","operators":[{"operator":"all?","coreOperator":"All","category":"Conditional and Boolean Operators"},{"operator":"amb","coreOperator":"Amb","category":"Conditional and Boolean Operators"},{"operator":"any?","coreOperator":"Contains","category":"Conditional and Boolean Operators"},{"operator":"average","coreOperator":"Average","category":"Mathematical and Aggregate Operators"},{"operator":"buffer_with_count","coreOperator":"Buffer","category":"Transforming Observables"},{"operator":"buffer_with_time","coreOperator":"Buffer","category":"Transforming Observables"},{"operator":"combine_latest","coreOperator":"CombineLatest","category":"Combining Observables"},{"operator":"concat","coreOperator":"Concat","category":"Mathematical and Aggregate Operators"},{"operator":"contains?","coreOperator":"Contains","category":"Conditional and Boolean Operators"},{"operator":"count","coreOperator":"Count","category":"Mathematical and Aggregate Operators"},{"operator":"create","coreOperator":"Create","category":"Creating Observables"},{"operator":"default_if_empty","coreOperator":"DefaultIfEmpty","category":"Conditional and Boolean Operators"},{"operator":"defer","coreOperator":"Defer","category":"Creating Observables"},{"operator":"dematerialize","coreOperator":"Materialize/Dematerialize","category":"Observable Utility Operators"},{"operator":"distinct","coreOperator":"Distinct","category":"Filtering Observables"},{"operator":"distinct_until_changed","coreOperator":"Distinct","category":"Filtering Observables"},{"operator":"element_at","coreOperator":"ElementAt","category":"Filtering Observables"},{"operator":"element_at_or_default","coreOperator":"ElementAt","category":"Filtering Observables"},{"operator":"empty","coreOperator":"Empty/Never/Throw","category":"Creating Observables"},{"operator":"ensures","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"first","coreOperator":"First","category":"Filtering Observables"},{"operator":"first_or_default","coreOperator":"First","category":"Filtering Observables"},{"operator":"flat_map","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"flat_map_with_index","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"generate","coreOperator":"Create","category":"Creating Observables"},{"operator":"ignore_elements","coreOperator":"IgnoreElements","category":"Filtering Observables"},{"operator":"just","coreOperator":"Just","category":"Creating Observables"},{"operator":"last","coreOperator":"Last","category":"Filtering Observables"},{"operator":"last_or_default","coreOperator":"Last","category":"Filtering Observables"},{"operator":"latest","coreOperator":"Switch","category":"Combining Observables"},{"operator":"map","coreOperator":"Map","category":"Transforming Observables"},{"operator":"map_with_index","coreOperator":"Map","category":"Transforming Observables"},{"operator":"materialize","coreOperator":"Materialize/Dematerialize","category":"Observable Utility Operators"},{"operator":"max","coreOperator":"Max","category":"Mathematical and Aggregate Operators"},{"operator":"max_by","coreOperator":"Max","category":"Mathematical and Aggregate Operators"},{"operator":"merge","coreOperator":"Merge","category":"Combining Observables"},{"operator":"merge_all","coreOperator":"Merge","category":"Combining Observables"},{"operator":"merge_all","coreOperator":"Concat","category":"Mathematical and Aggregate Operators"},{"operator":"merge_concurrent","coreOperator":"Merge","category":"Combining Observables"},{"operator":"min","coreOperator":"Min","category":"Mathematical and Aggregate Operators"},{"operator":"min_by","coreOperator":"Min","category":"Mathematical and Aggregate Operators"},{"operator":"never","coreOperator":"Empty/Never/Throw","category":"Creating Observables"},{"operator":"none?","coreOperator":"Contains","category":"Conditional and Boolean Operators"},{"operator":"observe_on","coreOperator":"ObserveOn","category":"Observable Utility Operators"},{"operator":"of_array","coreOperator":"From","category":"Creating Observables"},{"operator":"of_enumerable","coreOperator":"From","category":"Creating Observables"},{"operator":"of_enumerator","coreOperator":"From","category":"Creating Observables"},{"operator":"on_error_resume_next","coreOperator":"Catch","category":"Error Handling Operators"},{"operator":"raise_error","coreOperator":"Empty/Never/Throw","category":"Creating Observables"},{"operator":"range","coreOperator":"Range","category":"Creating Observables"},{"operator":"reduce","coreOperator":"Reduce","category":"Mathematical and Aggregate Operators"},{"operator":"repeat","coreOperator":"Repeat","category":"Creating Observables"},{"operator":"repeat_infinitely","coreOperator":"Repeat","category":"Creating Observables"},{"operator":"rescue_error","coreOperator":"Catch","category":"Error Handling Operators"},{"operator":"retry","coreOperator":"Retry","category":"Error Handling Operators"},{"operator":"retry_infinitely","coreOperator":"Retry","category":"Error Handling Operators"},{"operator":"scan","coreOperator":"Scan","category":"Transforming Observables"},{"operator":"select","coreOperator":"Filter","category":"Filtering Observables"},{"operator":"select_with_index","coreOperator":"Filter","category":"Filtering Observables"},{"operator":"sequence_eql?","coreOperator":"SequenceEqual","category":"Conditional and Boolean Operators"},{"operator":"single","coreOperator":"First","category":"Filtering Observables"},{"operator":"single_or_default","coreOperator":"First","category":"Filtering Observables"},{"operator":"skip","coreOperator":"Skip","category":"Filtering Observables"},{"operator":"skip_last","coreOperator":"SkipLast","category":"Filtering Observables"},{"operator":"skip_while","coreOperator":"SkipWhile","category":"Conditional and Boolean Operators"},{"operator":"skip_while_with_index","coreOperator":"SkipWhile","category":"Conditional and Boolean Operators"},{"operator":"skipUntil","coreOperator":"SkipUntil","category":"Conditional and Boolean Operators"},{"operator":"start_with","coreOperator":"StartWith","category":"Combining Observables"},{"operator":"subscribe","coreOperator":"Subscribe","category":"Observable Utility Operators"},{"operator":"subscribe_on","coreOperator":"SubscribeOn","category":"Observable Utility Operators"},{"operator":"sum","coreOperator":"Sum","category":"Mathematical and Aggregate Operators"},{"operator":"sychronize","coreOperator":"Serialize","category":"Observable Utility Operators"},{"operator":"take","coreOperator":"Take","category":"Filtering Observables"},{"operator":"take_last","coreOperator":"TakeLast","category":"Filtering Observables"},{"operator":"take_last_buffer","coreOperator":"TakeLast","category":"Filtering Observables"},{"operator":"take_until","coreOperator":"TakeUntil","category":"Conditional and Boolean Operators"},{"operator":"take_while","coreOperator":"TakeWhile","category":"Conditional and Boolean Operators"},{"operator":"take_while_with_index","coreOperator":"TakeWhile","category":"Conditional and Boolean Operators"},{"operator":"tap","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"to_a","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"to_h","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"using","coreOperator":"Using","category":"Observable Utility Operators"},{"operator":"window_with_count","coreOperator":"Window","category":"Transforming Observables"},{"operator":"zip","coreOperator":"Zip","category":"Combining Observables"}]},{"distribution":"RxScala","operators":[{"operator":":+","coreOperator":"Just","category":"Creating Observables"},{"operator":"+:","coreOperator":"StartWith","category":"Combining Observables"},{"operator":"++","coreOperator":"Concat","category":"Mathematical and Aggregate Operators"},{"operator":"amb","coreOperator":"Amb","category":"Conditional and Boolean Operators"},{"operator":"apply","coreOperator":"Create","category":"Creating Observables"},{"operator":"BlockingObservable.foreach","coreOperator":"Subscribe","category":"Observable Utility Operators"},{"operator":"BlockingObservable.toFuture","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"BlockingObservable.toIterable","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"BlockingObservable.toList","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"BlockingObservable.withFilter","coreOperator":"Filter","category":"Filtering Observables"},{"operator":"cache","coreOperator":"Replay","category":"Connectable Observable Operators"},{"operator":"collect","coreOperator":"Filter","category":"Filtering Observables"},{"operator":"combineLatest","coreOperator":"CombineLatest","category":"Combining Observables"},{"operator":"combineLatestWith","coreOperator":"CombineLatest","category":"Combining Observables"},{"operator":"concat","coreOperator":"Concat","category":"Mathematical and Aggregate Operators"},{"operator":"concatMap","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"connect","coreOperator":"Connect","category":"Connectable Observable Operators"},{"operator":"contains","coreOperator":"Contains","category":"Conditional and Boolean Operators"},{"operator":"count","coreOperator":"Count","category":"Mathematical and Aggregate Operators"},{"operator":"create","coreOperator":"Create","category":"Creating Observables"},{"operator":"debounce","coreOperator":"Debounce","category":"Filtering Observables"},{"operator":"defer","coreOperator":"Defer","category":"Creating Observables"},{"operator":"delay","coreOperator":"Delay","category":"Observable Utility Operators"},{"operator":"delaySubscription","coreOperator":"Delay","category":"Observable Utility Operators"},{"operator":"distinct","coreOperator":"Distinct","category":"Filtering Observables"},{"operator":"distinctUntilChanged","coreOperator":"Distinct","category":"Filtering Observables"},{"operator":"doOnCompleted","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"doOnEach","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"doOnError","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"doOnNext","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"doOnRequest","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"doOnSubscribe","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"doOnTerminate","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"doOnUnsubscribe","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"drop","coreOperator":"Skip","category":"Filtering Observables"},{"operator":"dropRight","coreOperator":"SkipLast","category":"Filtering Observables"},{"operator":"dropUntil","coreOperator":"SkipUntil","category":"Conditional and Boolean Operators"},{"operator":"dropWhile","coreOperator":"SkipWhile","category":"Conditional and Boolean Operators"},{"operator":"elementAt","coreOperator":"ElementAt","category":"Filtering Observables"},{"operator":"elementAtOrDefault","coreOperator":"ElementAt","category":"Filtering Observables"},{"operator":"empty","coreOperator":"Empty/Never/Throw","category":"Creating Observables"},{"operator":"error","coreOperator":"Empty/Never/Throw","category":"Creating Observables"},{"operator":"exists","coreOperator":"Contains","category":"Conditional and Boolean Operators"},{"operator":"filter","coreOperator":"Filter","category":"Filtering Observables"},{"operator":"filterNot","coreOperator":"Filter","category":"Filtering Observables"},{"operator":"finallyDo","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"first","coreOperator":"First","category":"Filtering Observables"},{"operator":"firstOrElse","coreOperator":"First","category":"Filtering Observables"},{"operator":"flatMap","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"flatMapIterable","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"flatMapIterableWith","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"flatMapWith","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"flatten","coreOperator":"Merge","category":"Combining Observables"},{"operator":"flattenDelayError","coreOperator":"Merge","category":"Combining Observables"},{"operator":"foldLeft","coreOperator":"Reduce","category":"Mathematical and Aggregate Operators"},{"operator":"forall","coreOperator":"All","category":"Conditional and Boolean Operators"},{"operator":"forEach","coreOperator":"Subscribe","category":"Observable Utility Operators"},{"operator":"from","coreOperator":"From","category":"Creating Observables"},{"operator":"groupBy","coreOperator":"GroupBy","category":"Transforming Observables"},{"operator":"groupJoin","coreOperator":"Join","category":"Combining Observables"},{"operator":"head","coreOperator":"First","category":"Filtering Observables"},{"operator":"head","coreOperator":"Last","category":"Filtering Observables"},{"operator":"headOption","coreOperator":"First","category":"Filtering Observables"},{"operator":"headOption","coreOperator":"Last","category":"Filtering Observables"},{"operator":"headOrElse","coreOperator":"First","category":"Filtering Observables"},{"operator":"headOrElse","coreOperator":"Last","category":"Filtering Observables"},{"operator":"interval","coreOperator":"Interval","category":"Creating Observables"},{"operator":"isEmpty","coreOperator":"Contains","category":"Conditional and Boolean Operators"},{"operator":"items","coreOperator":"From","category":"Creating Observables"},{"operator":"items","coreOperator":"Just","category":"Creating Observables"},{"operator":"join","coreOperator":"Join","category":"Combining Observables"},{"operator":"just","coreOperator":"Just","category":"Creating Observables"},{"operator":"last","coreOperator":"Last","category":"Filtering Observables"},{"operator":"lastOrElse","coreOperator":"Last","category":"Filtering Observables"},{"operator":"latest","coreOperator":"First","category":"Filtering Observables"},{"operator":"length","coreOperator":"Count","category":"Mathematical and Aggregate Operators"},{"operator":"longCount","coreOperator":"Count","category":"Mathematical and Aggregate Operators"},{"operator":"map","coreOperator":"Map","category":"Transforming Observables"},{"operator":"merge","coreOperator":"Merge","category":"Combining Observables"},{"operator":"mergeDelayError","coreOperator":"Merge","category":"Combining Observables"},{"operator":"multicast","coreOperator":"Publish","category":"Connectable Observable Operators"},{"operator":"nest","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"never","coreOperator":"Empty/Never/Throw","category":"Creating Observables"},{"operator":"next","coreOperator":"First","category":"Filtering Observables"},{"operator":"observeOn","coreOperator":"ObserveOn","category":"Observable Utility Operators"},{"operator":"onBackpressureBuffer","coreOperator":"backpressure operators","category":"Backpressure Operators"},{"operator":"onBackpressureDrop","coreOperator":"backpressure operators","category":"Backpressure Operators"},{"operator":"onBackpressureLatest","coreOperator":"backpressure operators","category":"Backpressure Operators"},{"operator":"onErrorFlatMap","coreOperator":"Catch","category":"Error Handling Operators"},{"operator":"onErrorResumeNext","coreOperator":"Catch","category":"Error Handling Operators"},{"operator":"onErrorReturn","coreOperator":"Catch","category":"Error Handling Operators"},{"operator":"onExceptionResumeNext","coreOperator":"Catch","category":"Error Handling Operators"},{"operator":"orElse","coreOperator":"DefaultIfEmpty","category":"Conditional and Boolean Operators"},{"operator":"product","coreOperator":"Sum","category":"Mathematical and Aggregate Operators"},{"operator":"publish","coreOperator":"Publish","category":"Connectable Observable Operators"},{"operator":"publishLast","coreOperator":"Publish","category":"Connectable Observable Operators"},{"operator":"reduce","coreOperator":"Reduce","category":"Mathematical and Aggregate Operators"},{"operator":"refCount","coreOperator":"RefCount","category":"Connectable Observable Operators"},{"operator":"repeat","coreOperator":"Repeat","category":"Creating Observables"},{"operator":"repeatWhen","coreOperator":"Repeat","category":"Creating Observables"},{"operator":"replay","coreOperator":"Replay","category":"Connectable Observable Operators"},{"operator":"retry","coreOperator":"Retry","category":"Error Handling Operators"},{"operator":"retryWhen","coreOperator":"Retry","category":"Error Handling Operators"},{"operator":"sample","coreOperator":"Sample","category":"Filtering Observables"},{"operator":"scan","coreOperator":"Scan","category":"Transforming Observables"},{"operator":"sequenceEqual","coreOperator":"SequenceEqual","category":"Conditional and Boolean Operators"},{"operator":"sequenceEqualWith","coreOperator":"SequenceEqual","category":"Conditional and Boolean Operators"},{"operator":"serialize","coreOperator":"Serialize","category":"Observable Utility Operators"},{"operator":"share","coreOperator":"RefCount","category":"Connectable Observable Operators"},{"operator":"single","coreOperator":"First","category":"Filtering Observables"},{"operator":"singleOption","coreOperator":"First","category":"Filtering Observables"},{"operator":"singleOrElse","coreOperator":"First","category":"Filtering Observables"},{"operator":"size","coreOperator":"Count","category":"Mathematical and Aggregate Operators"},{"operator":"sliding","coreOperator":"Window","category":"Transforming Observables"},{"operator":"slidingBuffer","coreOperator":"Buffer","category":"Transforming Observables"},{"operator":"subscribe","coreOperator":"Subscribe","category":"Observable Utility Operators"},{"operator":"subscribeOn","coreOperator":"SubscribeOn","category":"Observable Utility Operators"},{"operator":"sum","coreOperator":"Sum","category":"Mathematical and Aggregate Operators"},{"operator":"switch","coreOperator":"Switch","category":"Combining Observables"},{"operator":"switchIfEmpty","coreOperator":"DefaultIfEmpty","category":"Conditional and Boolean Operators"},{"operator":"switchMap","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"tail","coreOperator":"TakeLast","category":"Filtering Observables"},{"operator":"take","coreOperator":"Take","category":"Filtering Observables"},{"operator":"takeRight","coreOperator":"TakeLast","category":"Filtering Observables"},{"operator":"takeUntil","coreOperator":"TakeUntil","category":"Conditional and Boolean Operators"},{"operator":"takeWhile","coreOperator":"TakeWhile","category":"Conditional and Boolean Operators"},{"operator":"throttleFirst","coreOperator":"Sample","category":"Filtering Observables"},{"operator":"throttleLast","coreOperator":"Sample","category":"Filtering Observables"},{"operator":"throttleWithTimeout","coreOperator":"Debounce","category":"Filtering Observables"},{"operator":"timeInterval","coreOperator":"TimeInterval","category":"Observable Utility Operators"},{"operator":"timeout","coreOperator":"Timeout","category":"Observable Utility Operators"},{"operator":"timer","coreOperator":"Timer","category":"Creating Observables"},{"operator":"timestamp","coreOperator":"Timestamp","category":"Observable Utility Operators"},{"operator":"to","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"toArray","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"toBlocking","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"toBuffer","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"toIndexedSeq","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"toIterable","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"toIterator","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"toList","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"toMap","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"toMultiMap","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"toSet","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"toStream","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"toTraversable","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"toVector","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"tumbling","coreOperator":"Window","category":"Transforming Observables"},{"operator":"tumblingBuffer","coreOperator":"Buffer","category":"Transforming Observables"},{"operator":"unsubscribeOn","coreOperator":"SubscribeOn","category":"Observable Utility Operators"},{"operator":"using","coreOperator":"Using","category":"Observable Utility Operators"},{"operator":"withFilter","coreOperator":"Filter","category":"Filtering Observables"},{"operator":"zip","coreOperator":"Zip","category":"Combining Observables"},{"operator":"zipWith","coreOperator":"Zip","category":"Combining Observables"},{"operator":"zipWithIndex","coreOperator":"Zip","category":"Combining Observables"}]},{"distribution":"RxSwift","operators":[{"operator":"amb","coreOperator":"Amb","category":"Conditional and Boolean Operators"},{"operator":"buffer","coreOperator":"Buffer","category":"Transforming Observables"},{"operator":"catchError","coreOperator":"Catch","category":"Error Handling Operators"},{"operator":"catchErrorJustReturn","coreOperator":"Catch","category":"Error Handling Operators"},{"operator":"combineLatest","coreOperator":"CombineLatest","category":"Combining Observables"},{"operator":"concat","coreOperator":"Concat","category":"Mathematical and Aggregate Operators"},{"operator":"create","coreOperator":"Create","category":"Creating Observables"},{"operator":"debounce","coreOperator":"Debounce","category":"Filtering Observables"},{"operator":"defer","coreOperator":"Defer","category":"Creating Observables"},{"operator":"delaySubscription","coreOperator":"Delay","category":"Observable Utility Operators"},{"operator":"distinctUntilChanged","coreOperator":"Distinct","category":"Filtering Observables"},{"operator":"doOn","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"elementAt","coreOperator":"ElementAt","category":"Filtering Observables"},{"operator":"empty","coreOperator":"Empty/Never/Throw","category":"Creating Observables"},{"operator":"failWith","coreOperator":"Empty/Never/Throw","category":"Creating Observables"},{"operator":"filter","coreOperator":"Filter","category":"Filtering Observables"},{"operator":"flatMap","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"flatMapFirst","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"flatMapLatest","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"flatMapWithIndex","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"from","coreOperator":"From","category":"Creating Observables"},{"operator":"generate","coreOperator":"Create","category":"Creating Observables"},{"operator":"interval","coreOperator":"Interval","category":"Creating Observables"},{"operator":"just","coreOperator":"Just","category":"Creating Observables"},{"operator":"map","coreOperator":"Map","category":"Transforming Observables"},{"operator":"mapWithIndex","coreOperator":"Map","category":"Transforming Observables"},{"operator":"merge","coreOperator":"Merge","category":"Combining Observables"},{"operator":"multicast","coreOperator":"Publish","category":"Connectable Observable Operators"},{"operator":"never","coreOperator":"Empty/Never/Throw","category":"Creating Observables"},{"operator":"observeOn","coreOperator":"ObserveOn","category":"Observable Utility Operators"},{"operator":"publish","coreOperator":"Publish","category":"Connectable Observable Operators"},{"operator":"range","coreOperator":"Range","category":"Creating Observables"},{"operator":"reduce","coreOperator":"Reduce","category":"Mathematical and Aggregate Operators"},{"operator":"refCount","coreOperator":"RefCount","category":"Connectable Observable Operators"},{"operator":"repeatElement","coreOperator":"Repeat","category":"Creating Observables"},{"operator":"replay","coreOperator":"Replay","category":"Connectable Observable Operators"},{"operator":"retry","coreOperator":"Retry","category":"Error Handling Operators"},{"operator":"retryWhen","coreOperator":"Retry","category":"Error Handling Operators"},{"operator":"sample","coreOperator":"Sample","category":"Filtering Observables"},{"operator":"sampleLatest","coreOperator":"Sample","category":"Filtering Observables"},{"operator":"scan","coreOperator":"Scan","category":"Transforming Observables"},{"operator":"sequenceOf","coreOperator":"Just","category":"Creating Observables"},{"operator":"shareReplay","coreOperator":"Replay","category":"Connectable Observable Operators"},{"operator":"single","coreOperator":"First","category":"Filtering Observables"},{"operator":"skip","coreOperator":"Skip","category":"Filtering Observables"},{"operator":"skipUntil","coreOperator":"SkipUntil","category":"Conditional and Boolean Operators"},{"operator":"skipWhile","coreOperator":"SkipWhile","category":"Conditional and Boolean Operators"},{"operator":"skipWhileWithIndex","coreOperator":"SkipWhile","category":"Conditional and Boolean Operators"},{"operator":"startWith","coreOperator":"StartWith","category":"Combining Observables"},{"operator":"subscribe","coreOperator":"Subscribe","category":"Observable Utility Operators"},{"operator":"subscribeOn","coreOperator":"SubscribeOn","category":"Observable Utility Operators"},{"operator":"switchLatest","coreOperator":"Switch","category":"Combining Observables"},{"operator":"take","coreOperator":"Take","category":"Filtering Observables"},{"operator":"takeLast","coreOperator":"TakeLast","category":"Filtering Observables"},{"operator":"takeUntil","coreOperator":"TakeUntil","category":"Conditional and Boolean Operators"},{"operator":"takeWhile","coreOperator":"TakeWhile","category":"Conditional and Boolean Operators"},{"operator":"takeWhileWithIndex","coreOperator":"TakeWhile","category":"Conditional and Boolean Operators"},{"operator":"throttle","coreOperator":"Debounce","category":"Filtering Observables"},{"operator":"timeout","coreOperator":"Timeout","category":"Observable Utility Operators"},{"operator":"timer","coreOperator":"Timer","category":"Creating Observables"},{"operator":"toArray","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"toObservable","coreOperator":"From","category":"Creating Observables"},{"operator":"using","coreOperator":"Using","category":"Observable Utility Operators"},{"operator":"window","coreOperator":"Window","category":"Transforming Observables"},{"operator":"withLatestFrom","coreOperator":"CombineLatest","category":"Combining Observables"},{"operator":"zip","coreOperator":"Zip","category":"Combining Observables"}]},{"distribution":"RxCpp","operators":[{"operator":"amb","coreOperator":"Amb","category":"Conditional and Boolean Operators"},{"operator":"as_blocking","coreOperator":"To","category":"Operators to Convert Observables"},{"operator":"average","coreOperator":"Average","category":"Mathematical and Aggregate Operators"},{"operator":"buffer","coreOperator":"Buffer","category":"Transforming Observables"},{"operator":"combine_latest","coreOperator":"CombineLatest","category":"Combining Observables"},{"operator":"concat","coreOperator":"Concat","category":"Mathematical and Aggregate Operators"},{"operator":"concat_map","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"connect","coreOperator":"Connect","category":"Connectable Observable Operators"},{"operator":"connect_forever","coreOperator":"Connect","category":"Connectable Observable Operators"},{"operator":"count","coreOperator":"Count","category":"Mathematical and Aggregate Operators"},{"operator":"defer","coreOperator":"Defer","category":"Creating Observables"},{"operator":"distinct_until_changed","coreOperator":"Distinct","category":"Filtering Observables"},{"operator":"empty","coreOperator":"Empty/Never/Throw","category":"Creating Observables"},{"operator":"filter","coreOperator":"Filter","category":"Filtering Observables"},{"operator":"finally","coreOperator":"Do","category":"Observable Utility Operators"},{"operator":"first","coreOperator":"First","category":"Filtering Observables"},{"operator":"flat_map","coreOperator":"FlatMap","category":"Transforming Observables"},{"operator":"from","coreOperator":"From","category":"Creating Observables"},{"operator":"group_by","coreOperator":"GroupBy","category":"Transforming Observables"},{"operator":"interval","coreOperator":"Interval","category":"Creating Observables"},{"operator":"iterate","coreOperator":"Reduce","category":"Mathematical and Aggregate Operators"},{"operator":"just","coreOperator":"Just","category":"Creating Observables"},{"operator":"last","coreOperator":"Last","category":"Filtering Observables"},{"operator":"map","coreOperator":"Map","category":"Transforming Observables"},{"operator":"merge","coreOperator":"Merge","category":"Combining Observables"},{"operator":"multicast","coreOperator":"Publish","category":"Connectable Observable Operators"},{"operator":"never","coreOperator":"Empty/Never/Throw","category":"Creating Observables"},{"operator":"observe_on","coreOperator":"ObserveOn","category":"Observable Utility Operators"},{"operator":"pairwise","coreOperator":"Buffer","category":"Transforming Observables"},{"operator":"publish","coreOperator":"Publish","category":"Connectable Observable Operators"},{"operator":"publish","coreOperator":"RefCount","category":"Connectable Observable Operators"},{"operator":"publish_synchronized","coreOperator":"Replay","category":"Connectable Observable Operators"},{"operator":"range","coreOperator":"Range","category":"Creating Observables"},{"operator":"reduce","coreOperator":"Reduce","category":"Mathematical and Aggregate Operators"},{"operator":"repeat","coreOperator":"Repeat","category":"Creating Observables"},{"operator":"replay","coreOperator":"Replay","category":"Connectable Observable Operators"},{"operator":"retry","coreOperator":"Retry","category":"Error Handling Operators"},{"operator":"scope","coreOperator":"Using","category":"Observable Utility Operators"},{"operator":"skip","coreOperator":"Skip","category":"Filtering Observables"},{"operator":"skip_until","coreOperator":"SkipUntil","category":"Conditional and Boolean Operators"},{"operator":"start_with","coreOperator":"StartWith","category":"Combining Observables"},{"operator":"subscribe","coreOperator":"Subscribe","category":"Observable Utility Operators"},{"operator":"sum","coreOperator":"Sum","category":"Mathematical and Aggregate Operators"},{"operator":"switch_on_next","coreOperator":"Switch","category":"Combining Observables"},{"operator":"take","coreOperator":"Take","category":"Filtering Observables"},{"operator":"take_until","coreOperator":"TakeUntil","category":"Conditional and Boolean Operators"},{"operator":"throw","coreOperator":"Empty/Never/Throw","category":"Creating Observables"},{"operator":"window","coreOperator":"Window","category":"Transforming Observables"},{"operator":"window_with_time","coreOperator":"Window","category":"Transforming Observables"},{"operator":"window_with_time_or_count","coreOperator":"Window","category":"Transforming Observables"},{"operator":"zip","coreOperator":"Zip","category":"Combining Observables"}]}]